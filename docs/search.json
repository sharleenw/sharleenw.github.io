[
  {
    "objectID": "posts/2020-09-02-how-to-remake-a-blogdown-blog-from-scratch/index.html",
    "href": "posts/2020-09-02-how-to-remake-a-blogdown-blog-from-scratch/index.html",
    "title": "How to Remake a Blogdown Blog from Scratch",
    "section": "",
    "text": "Update (2023): My blog has broken a couple times since writing this post about Blogdown, Hugo, and Netlify, and so I’ve redone my blog again, this time in Quarto and using Github Pages! I highly recommend using Quarto and Github Pages now. However, I have left the below post in case it helps anyone.\n\n\nBackground\nIn early 2019, I created a blogdown blog with the help of Alison Hill’s great article Up & Running with blogdown.\nRecently, when I went to make a new blog post, I realized the blog was going to break since I’d updated some packages.\nI decided I could either try to fix the blog, or make a new one (with a new theme!) and copy over my old blog posts. I chose the second option.\nI learned a lot by doing this, so I’ve jotted down some things, in the hopes it might help myself or someone else!\nSo, in no particular order, here are some things I’ve learned! (Please let me know if anything is incorrect, I am by no means a blogdown expert.)\n\n\nRead the freakin’ manual\n\nHugo Tranquilpeak has a great user documentation section.\nblogdown itself has a book that has everything you could ever need to know about blogdown.\nAlison Hill has a fantastic series of posts on her blog called “A Spoonful of Hugo” (with at least these four articles):\n\nPage Bundles\nThe netlify.toml File\nArchetypes\nTroubleshooting Your Build\n\nIncluding search terms like “blogdown rmd” or “hugo tranquilpeak” with my question gets different types of answers, some that will be more geared towards R and some that will be more geared towards hugo. I have found both types of searches to be helpful.\n\n\n\nHow can I get emojis to work❓\nThere are two options:\n\nSolution found here: Download Hadley Wickham’s emo package and type `r emo::ji(\"smile\")` into the text of the .Rmd file.\nAnother solution is to set enableEmoji = true in the config.toml.\n\n\n\nUse devtools::session_info() at the bottom of every post\nWhen transferring over my posts, two of them no longer worked due to external package updates!\nSo, following the great example set by David Neuzerling’s blog (and others), I will be adding devtools::session_info() to the bottom of my posts. I mean, it won’t fix the fact that my code no longer works, but it adds an extra layer of proof that it did, in fact, work, at that particular time, given that particular set of tools!\n\n\nUse renv\nI will be using renv with this blog, so that external package updates will no longer break my blog! (Hopefully.)\n\n\nMaking a template\nI’ve added an archetype to my blog, following Alison Hill’s post on Archetypes (which references this blog post by Leo Collado-Torres).\nAn “archetype” is another word for template.\nI created an archetype folder in my top-level directory, and added my template (called template.md) to that folder. This template archetype now pops up as an option when I use the RStudio Addin “New Post”.\nTo see the code that I used for my /archetype/template.md (modified from Leo Collado-Torres’ archetype), click here.\n\n\nWhat to touch and what not to touch\n\nThe actual blog content goes in the /content folder, with posts going in the /content/posts/ folder and any other type of content going in its own section (like /content/about/ for the About section.)\nUse page bundles to keep the content of the /content folder organized, and follow Yihui’s advice to change the format of the permalinks in the config.toml to \"/:year/:month/:day/:slug/\" (Page Bundles).\nThe /public folder can be deleted before rebuilding your website. In fact, why not regularly restart R, delete the /public folder and then blogdown:::serve_site() to make everything start fresh! (Troubleshooting Your Build).\nThe /archetype folder needs to be top-level (I had to create this folder myself)\nThe _output.yml file also needs to be top-level.\nIf you have images or CSS you want to include, create the appropriate folders in the /static folder (/static/img or /static/css), as these will be copied into the /public folder once the site is built (blogdown book).\nDon’t touch the /theme folder! You should be able to do everything you need to do in the other folders.\n\n\n\nAdding an “About” page\nThe “About” page is not really a post, it’s more of a standalone document. With the Tranquilpeak theme, there is an archetype called a “page” that you can use when creating it. The folder structure I used to create my “About” page was /content/about/index.md.\n\n\nThere is a difference between .Rmd and .Rmarkdown (who knew?)\nTranquilpeak theme has a cute default syntax highlighting, but I couldn’t figure out how to get it to work reliably. Until I realized the following (blogdown book):\n\nFiles saved as .Rmarkdown get converted to .markdown first, before .html.\nHowever, files saved as .Rmd go straight to .html.\n\nThe fancy syntax highlighting only works in .markdown files (which only happens if I save the files as .Rmarkdown and not .Rmd). Some of the other CSS only works for .markdown files too. (See my section below on adding CSS.)\nThe blogdown book prefers .Rmd (as it allows for citations, which I have), so that’s what I’m using. I figured out a comparable syntax highlighting in the next section.\n\n\nSyntax highlighting\nThanks to the blogdown book, I found out I could create a _output.yml file in the root directory, and include a .Rmd-specific syntax highlighting template for all my files. My _output.yml file looks like:\n\nblogdown::html_page:\n  highlight: tango\n  toc: yes\n\nGarrick Aden-Buie’s blog has a nice gallery comparing the different syntax-highlighting options.\nThis _output.yml file can also be used to add defaults to each post. For example, I added a line to include a Table of Contents. However, this cannot be overwritten in each individual post, so it’s an all-or-nothing thing.\n\n\nRelative links\nOn my original blog, I included all absolute links. Yikes! So now, thanks to Alison Hill’s Page Bundles post (that references the blogdown book), I now know how to make relative links. Basically, if I want to include relative posts, I look at what the structure of the /public folder is, and use that as my relative link. For example, if I wanted to refer to this post, I would use /2020/07/08/how-to-remake-a-blogdown-blog-from-scratch/ as the link.\n\n\nMy settings for the “New Post” Addin\n\nAdd a title. Author and Date should be filled in automatically\nSubdirectory is “post”\nDon’t include categories\nAdd some relevant tags\nUse the template.md archetype\nKeep the default slug\nDelete the “en-us” under Language\nFormat is .Rmd, not .Rmarkdown\n\n\n\nAdding a bit of CSS\n\n  This is a notice\n\n\n  Watch out!\n\n\n  Warning!\n\n\n  Way to go!\n\nI wanted to be able to add the above alert bars to my posts so, using a combination of these two sources: Bootstrap alerts and Custom CSS with Rmd, I created a custom CSS file in /static/css/mystyle.css with the following code:\n\n/* @import url('https://maxcdn.bootstrapcdn.com/bootswatch/3.3.7/cosmo/bootstrap.min.css'); may conflict with default theme*/\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons'); /*google icons*/\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'); /*font awesome icons*/\n\n.alert {\npadding: 15px;\nmargin-bottom: 20px;\nborder: 1px solid transparent;\nborder-radius: 4px;\n}\n.alert-success {\ncolor: #3c763d;\nbackground-color: #dff0d8;\nborder-color: #d6e9c6;\n}\n.alert-danger,\n.alert-error {\n  color: #b94a48;\n  background-color: #f2dede;\n  border-color: #eed3d7;\n}\n.alert-info {\n  color: #3a87ad;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.alert-warning {\n  background-color: #fffcbb;\n  border-color: #ffed83;\n}\n\nAnd in my actual posts, I need to write the following html:\n\n&lt;div class=\"well alert alert-info text-center\" role=\"alert\"&gt;\n  &lt;span class=\"fa fa-info-circle\"&gt;&lt;/span&gt;&nbsp;&nbsp;This is a notice\n&lt;/div&gt;\n\n&lt;div class=\"well alert alert-danger text-center\" role=\"alert\"&gt;\n  &lt;span class=\"fa fa-minus-circle\"&gt;&lt;/span&gt;&nbsp;&nbsp;Watch out!\n&lt;/div&gt;\n\n&lt;div class=\"well alert alert-warning text-center\" role=\"alert\"&gt;\n  &lt;span class=\"fa fa-exclamation-triangle\"&gt;&lt;/span&gt;&nbsp;&nbsp;Warning!\n&lt;/div&gt;\n\n&lt;div class=\"well alert alert-success text-center\" role=\"alert\"&gt;\n  &lt;span class=\"fa fa-check-circle\"&gt;&lt;/span&gt;&nbsp;&nbsp;Way to go!\n&lt;/div&gt;\n\n\n\nThoughts for next time I want to update my blog\nIf I want to change my theme again, I think I could simply swap out the current theme in the /theme folder, update the config.toml and /archetype/template.md files, and be done? I may also have to update all of the .yamls of each article.\nI think I will just use Tom Mock’s blog post and use distill if I ever want to update my blog again!\n\n\n\nSession info\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       America/Vancouver\n date     2023-07-27\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.3.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n devtools    * 2.4.5      2022-10-11 [1] CRAN (R 4.3.1)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.3.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emo         * 0.0.0.9000 2023-07-22 [1] Github (hadley/emo@3f03b11)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.2      2023-04-25 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n here        * 1.0.1      2020-12-13 [1] CRAN (R 4.3.0)\n htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httpuv        1.6.10     2023-05-08 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.3.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate     1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.3.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n processx      3.8.1      2023-04-18 [1] CRAN (R 4.3.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.3.0)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr         1.0.1      2023-01-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.3.0)\n remotes       2.4.2      2021-11-30 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21       2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n shiny         1.7.4      2022-12-15 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr       1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis     * 2.2.2      2023-07-06 [1] CRAN (R 4.3.1)\n vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.3.0)\n xfun          0.39       2023-04-20 [1] CRAN (R 4.3.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/sharl/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2019-05-26-hamilton-cbc-part-4/index.html",
    "href": "posts/2019-05-26-hamilton-cbc-part-4/index.html",
    "title": "Hamilton Christmas Bird Count: Part 4",
    "section": "",
    "text": "This is a series of five posts for this data:\n\nPart 1: data downloading and cleaning\nPart 2a: more cleaning\nPart 2b: visualizing\nPart 3: a Shiny app\nPart 4: a gganimate plot\n\n\n\nIntroduction\nA member of the Hamilton Naturalist Club mentioned the idea of creating a gganimate plot, so I thought I’d try it! I mostly modified the code from this StackOverflow page.\nThere’s some jumping around, and I think a way to prevent that might be to interpolate values between each year so that, say, Lesser Scaup doesn’t go from not-on-the-chart in one year to 2002 individuals seen in the next year.\n\n\nData visualizing using a gganimate plot\nHere is the final plot:\n\n\n\nFinal gif of the top bird counts since 1955\n\n\nAnd here is the code that I used to create it!\n\nlibrary(dplyr)\nlibrary(here)\nlibrary(readr)\nlibrary(gganimate)\nlibrary(ggplot2)\nlibrary(gifski)\n\nhamilton_cbc &lt;- read_rds(here(\"posts\",\n                              \"2019-03-24-hamilton-cbc-part-3\",\n                              \"hamilton_cbc_shiny\",\n                              \"hamilton_cbc_output_part_2.rds\"))\n\n\ntheme_set(theme_minimal())\n\n# Every year had at least 9 species\nhamilton_cbc %&gt;% \n  group_by(year) %&gt;% \n  filter(how_many_counted &gt; 0) %&gt;%\n  summarise(n_counted = n()) %&gt;%\n  arrange(n_counted)\n\nhamilton_cbc_ranked &lt;- hamilton_cbc %&gt;%\n  group_by(year) %&gt;%\n  # The * 1 makes it possible to have non-integer ranks while sliding (because it makes rank a double, not integer variable)\n  arrange(year, -(how_many_counted), species) %&gt;%\n  mutate(rank = row_number() * 1) %&gt;%\n  ungroup() %&gt;%\n  filter(rank &lt; 8,\n         year &gt;= 1955)\n\np &lt;- hamilton_cbc_ranked %&gt;% \n  ggplot(aes(rank, group = species, \n                     fill = as.factor(species), color = as.factor(species))) +\n  geom_tile(aes(y = how_many_counted / 2,\n                height = how_many_counted,\n                width = 0.9), alpha = 0.8, color = NA) +\n  \n  # text in x-axis (requires clip = \"off\" in coord_*)\n  # paste(country, \" \")  is a hack to make pretty spacing, since hjust &gt; 1 \n  #   leads to weird artifacts in text spacing.\n  geom_text(aes(y = 0, label = paste(species, \" \")), vjust = 0.2, hjust = 1) +\n  geom_text(aes(y = how_many_counted, label = paste0(\" \", how_many_counted), hjust = 0)) + # value label thanks to Nitish\n  \n  coord_flip(clip = \"off\", expand = FALSE) +\n  scale_y_continuous(labels = scales::comma) +\n  scale_x_reverse() +\n  guides(color = FALSE, fill = FALSE) +\n  \n  labs(title='{closest_state}', x = \"\", y = \"Number of birds counted\") +\n  theme(plot.title = element_text(hjust = 0, size = 22),\n        axis.ticks.y = element_blank(),  # These relate to the axes post-flip\n        axis.text.y  = element_blank(),  # These relate to the axes post-flip\n        plot.margin = margin(1,1,1,4, \"cm\")) +\n  \n  transition_states(year, transition_length = 4, state_length = 1) +\n  ease_aes('cubic-in-out')\n\n# Have to install the gifski package in order for the renderer to work\n# Make fps 25 to make it smoother\n# Duration is how many centiseconds between years\nanimate(p, fps = 25, duration = 80, width = 800, height = 600, renderer = gifski_renderer())\n\nAnd thank you to the Christmas Bird Count! The Christmas Bird Count Data was provided by National Audubon Society and through the generous efforts of Bird Studies Canada and countless volunteers across the western hemisphere.\n\n\n\nSession info\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       America/Vancouver\n date     2023-07-27\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.3.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n devtools    * 2.4.5      2022-10-11 [1] CRAN (R 4.3.1)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.2      2023-04-20 [1] CRAN (R 4.3.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emo         * 0.0.0.9000 2023-07-22 [1] Github (hadley/emo@3f03b11)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.3.0)\n fansi         1.0.4      2023-01-22 [1] CRAN (R 4.3.0)\n farver        2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.2      2023-04-25 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n gganimate   * 1.0.8      2022-09-08 [1] CRAN (R 4.3.1)\n ggplot2     * 3.4.2      2023-04-03 [1] CRAN (R 4.3.0)\n gifski        1.12.0-1   2023-06-08 [1] CRAN (R 4.3.1)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gtable        0.3.3      2023-03-21 [1] CRAN (R 4.3.0)\n here        * 1.0.1      2020-12-13 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httpuv        1.6.10     2023-05-08 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.3.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate     1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n processx      3.8.1      2023-04-18 [1] CRAN (R 4.3.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.3.0)\n progress      1.2.2      2019-05-16 [1] CRAN (R 4.3.0)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr         1.0.1      2023-01-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n remotes       2.4.2      2021-11-30 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21       2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.3.0)\n scales        1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n shiny         1.7.4      2022-12-15 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr       1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tweenr        2.0.2      2022-09-06 [1] CRAN (R 4.3.1)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.3.0)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis     * 2.2.2      2023-07-06 [1] CRAN (R 4.3.1)\n utf8          1.2.3      2023-01-31 [1] CRAN (R 4.3.0)\n vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.3.0)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.39       2023-04-20 [1] CRAN (R 4.3.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/sharl/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2019-02-24-hamilton-cbc-part-2b/index.html",
    "href": "posts/2019-02-24-hamilton-cbc-part-2b/index.html",
    "title": "Hamilton Christmas Bird Count: Part 2b",
    "section": "",
    "text": "This is a series of five posts for this data:\n\nPart 1: data downloading and cleaning\nPart 2a: more cleaning\nPart 2b: visualizing\nPart 3: a Shiny app\nPart 4: a gganimate plot"
  },
  {
    "objectID": "posts/2019-02-24-hamilton-cbc-part-2b/index.html#comparing-the-counts-first-and-latest-year",
    "href": "posts/2019-02-24-hamilton-cbc-part-2b/index.html#comparing-the-counts-first-and-latest-year",
    "title": "Hamilton Christmas Bird Count: Part 2b",
    "section": "Comparing the count’s first and latest year",
    "text": "Comparing the count’s first and latest year\nLet’s start by looking at the first year anyone went out to do the count, in 1921. In Curry (2006), Ian Richards mentions that 2 observers went out that year for 8 hours, and they saw 9 species.\n\nhamilton_cbc %&gt;%\n  filter(year == min(year),\n         how_many_counted != 0) %&gt;%\n  select(species, how_many_counted) %&gt;%\n  arrange(-how_many_counted, species)\n\n# A tibble: 9 × 2\n  species                 how_many_counted\n  &lt;chr&gt;                              &lt;int&gt;\n1 American Tree Sparrow                 12\n2 Black-capped Chickadee                 9\n3 Blue Jay                               3\n4 Downy Woodpecker                       2\n5 White-breasted Nuthatch                2\n6 American Robin                         1\n7 Brown Creeper                          1\n8 Gray Jay                               1\n9 Ruffed Grouse                          1\n\n\nOh wow, they saw a Gray Jay! How many times have Gray Jays been seen on Hamilton Christmas Bird Counts?\n\nhamilton_cbc %&gt;%\n  filter(species == \"Gray Jay\",\n         how_many_counted != 0)\n\n# A tibble: 1 × 6\n   year species  species_latin         how_many_counted total_hours\n  &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;                            &lt;int&gt;       &lt;dbl&gt;\n1  1921 Gray Jay Perisoreus canadensis                1           8\n# ℹ 1 more variable: how_many_counted_by_hour &lt;dbl&gt;\n\n\nThat was the only time! At first I thought it might have been a mistake, but Curry (2006) mentions, in the Gray Jay historical records section, that at least two Gray Jays were seen that winter. (This book is so thorough!)\nHow does the first year’s count compare to the most recent year’s count?\n\nhamilton_cbc %&gt;%\n  filter(year == max(year),\n         how_many_counted != 0) %&gt;%\n  arrange(-how_many_counted, species) %&gt;%\n  head(15)\n\n# A tibble: 15 × 6\n    year species                species_latin       how_many_counted total_hours\n   &lt;int&gt; &lt;chr&gt;                  &lt;chr&gt;                          &lt;int&gt;       &lt;dbl&gt;\n 1  2017 Canada Goose           Branta canadensis               6665        199.\n 2  2017 Mallard                Anas platyrhynchos              5034        199.\n 3  2017 Long-tailed Duck       Clangula hyemalis               3465        199.\n 4  2017 European Starling      Sturnus vulgaris                2844        199.\n 5  2017 House Sparrow          Passer domesticus               2731        199.\n 6  2017 Common Goldeneye       Bucephala clangula              2180        199.\n 7  2017 Greater Scaup          Aythya marila                   1378        199.\n 8  2017 Dark-eyed Junco        Junco hyemalis                  1068        199.\n 9  2017 Black-capped Chickadee Poecile atricapill…              935        199.\n10  2017 Rock Pigeon            Columba livia                    875        199.\n11  2017 White-winged Scoter    Melanitta fusca                  725        199.\n12  2017 Mourning Dove          Zenaida macroura                 699        199.\n13  2017 Ring-billed Gull       Larus delawarensis               629        199.\n14  2017 Northern Cardinal      Cardinalis cardina…              550        199.\n15  2017 American Goldfinch     Spinus tristis                   473        199.\n# ℹ 1 more variable: how_many_counted_by_hour &lt;dbl&gt;\n\n\nThose species look more familiar! And almost 200 person-hours were put in, amazing!\nIn 2017, how many species were seen in total?\n\nhamilton_cbc %&gt;%\n  filter(year == max(year),\n         how_many_counted != 0) %&gt;%\n  count() %&gt;%\n  pull()\n\n[1] 100\n\n\n100 species, nice! It’s not easy to get 100 species during a Christmas Bird Count. Only four other Ontario Christmas Bird Counts have done it, at least by 2004 (the latest year of Christmas Bird Count data in Curry (2006))."
  },
  {
    "objectID": "posts/2019-02-24-hamilton-cbc-part-2b/index.html#number-of-species-counted-each-year",
    "href": "posts/2019-02-24-hamilton-cbc-part-2b/index.html#number-of-species-counted-each-year",
    "title": "Hamilton Christmas Bird Count: Part 2b",
    "section": "Number of species counted each year",
    "text": "Number of species counted each year\nBelow is a re-creation of a plot found in Curry (2006). It’s a plot of the number of species seen and the number of person-hours put in each year. Person-hours are the total number of hours the counters put in during that count. For example, if 3 people went out for four hours, there were 12 person-hours (4 * 3).\n\nhamilton_cbc %&gt;%\n  group_by(year, total_hours) %&gt;%\n  # Bringing total_hours along for the grouping.\n  # Adding it won't affect the grouping because its value is constant within\n  # the grouping of each year, and this way we can use it for plotting\n  # after we use summarise\n  filter(how_many_counted != 0) %&gt;%\n  summarise(number_of_species_that_year = n()) %&gt;%\n  ungroup() %&gt;%\n  ggplot() +\n  geom_line(aes(x = year,\n                y = number_of_species_that_year,\n                color = \"Number of species heard or seen\"),\n            size = 1) +\n  geom_line(aes(x = year, y = total_hours, color = \"Number of person-hours\"),\n            size = 1) +\n  labs(x = \"Year\",\n       y = \"Number of species and person-hours\") +\n  scale_color_manual(values = c(\"Number of person-hours\" = \"orange\", \n                                \"Number of species heard or seen\" = \"blue\")) +\n  theme(legend.title = element_blank(),\n        legend.position = \"bottom\",\n        legend.direction = \"vertical\")\n\n\n\n\nAs the number of hours of person-hours increases, so does the number of species counted. But only up to a point, after which the number of species levels off. This probably means that, as long as there are at least 200 or so person-hours in a count, the Hamilton Christmas Bird Count counters will be finding all or almost all of the species in the Hamilton area on count day.\nHere is a plot of the cumulative number of species seen during each count. I think the main take-away of this plot is that it is getting harder to see new species every year, which makes sense.\n\nhamilton_cbc %&gt;%\n  filter(how_many_counted != 0) %&gt;%\n  group_by(species) %&gt;%\n  filter(year == min(year)) %&gt;% # What's the first year any species was counted?\n  ungroup() %&gt;%\n  group_by(year) %&gt;%\n  summarise(number_of_new_species_that_year = n()) %&gt;%\n  mutate(cumulative_new_species = cumsum(number_of_new_species_that_year)) %&gt;%\n  ggplot() +\n  geom_point(aes(x = year, y = cumulative_new_species), col = \"orange\", size = 2) +\n  labs(x = \"Year\",\n       y = \"Cumulative number of species counted\")"
  },
  {
    "objectID": "posts/2019-02-24-hamilton-cbc-part-2b/index.html#highlighting-specific-species",
    "href": "posts/2019-02-24-hamilton-cbc-part-2b/index.html#highlighting-specific-species",
    "title": "Hamilton Christmas Bird Count: Part 2b",
    "section": "Highlighting specific species",
    "text": "Highlighting specific species\nI now want to look at some of the species and how their counts have changed over the course of the count’s history. There is a lot to look at!\nCurry (2006) mentions that the Hamilton Christmas Bird Count count circle was a different size before 1955, so, for most of the plots, I will only show information starting after 1955. But sometimes I think it’s interesting to look at all years of the data, so I might do that too! 😄\nSince the code of these plots will be very similar, I am going to make a function for the plotting, where only the species plotted and the start year will vary:\n\nplot_species &lt;- function(cbc_df, start_year, species_to_plot) {\n  \n  cbc_df %&gt;%\n    filter(species %in% species_to_plot,\n           year &gt;= start_year) %&gt;%\n    ggplot() +\n    geom_line(aes(\n      x = year, \n      y = how_many_counted,\n      color = species),\n      # Put the size of the line outside of the aes because we're not varying it\n      size = 1) +\n    labs(x = \"Year\",\n         y = \"Number counted\",\n         color = \"Species\") +\n    facet_wrap(vars(species),\n               scales = \"free\",\n               dir = \"v\") +\n    scale_y_continuous(label = scales::comma) + # Add commas for thousands where necessary\n    theme(legend.position = \"none\",\n          plot.margin = margin(2, 20, 2, 2))\n\n}\n\n\nIntroduced species\nEveryone is interested in introduced species. The four I will be plotting are the European Starling, the House Sparrow, the Rock Pigeon, and the Ring-Necked Pheasant.\nAccording to Curry (2006), Rock Pigeons only started being counted in 1973 and House Sparrows in 1931 (I think due to them being introduced species).\n\nintroduced &lt;- c(\"European Starling\",\n                \"House Sparrow\",\n                \"Rock Pigeon\",\n                \"Ring-necked Pheasant\")\n\nhamilton_cbc %&gt;%\n  # Make Rock Pigeon values pre-1973 to be NA as they were not counted\n  mutate(how_many_counted = ifelse(species == \"Rock Pigeon\" &\n                                     year &lt; 1973,\n                                   NA,\n                                   how_many_counted)) %&gt;% \n  plot_species(start_year = 1955,\n               species_to_plot = introduced)\n\n\n\n\nLook at the number of European Starlings! It’s so interesting that the numbers peaked in the 60,000’s in the 1980’s and have since seen a sharp decrease. House Sparrow counts have been pretty consistent. Pigeon numbers have slowly increased, and there was one year, in 2005, with over double the expected number. And the Ring-necked Pheasants have declined to be almost non-existent. Curry (2006), referencing a 1973 Waterdown Review article, says that a change in urbanization pattern, with areas now going directly from intensive farming to sub-divisions, with no scrubby brush period in between (which is where the pheasants like to live), is the main reason for the decline.\n\n\nEastern Bluebird\nThe next species I want to look at is the Eastern Bluebird. I volunteer with a local group that maintains bluebird nest boxes and wanted to see if the Hamilton Christmas Bird Count numbers showed any changes in Eastern Bluebird numbers since the Ontario Eastern Bluebird Society started in 1988.\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1955,\n               species_to_plot = \"Eastern Bluebird\")\n\n\n\n\nPerhaps the nest boxes are helping! Bluebird numbers have certainly increased since the 1980’s. Although I’m not sure what would cause such interesting cyclical increases and decreases since the late 1990’s!\nHowever, in Curry (2006), there is a chapter by Bill Read called History of the Eastern Bluebird in the Hamilton Study Area, where he writes that the reason more bluebirds are overwintering now is mainly due to warming winter weather patterns. So maybe it’s not the nest boxes! 🤷‍♀\n\n\nDucks\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1955,\n               species_to_plot = c(\"Ruddy Duck\", \n                                   \"Long-tailed Duck\", \n                                   \"Greater Scaup\", \n                                   \"Lesser Scaup\", \n                                   \"Mallard\")) \n\n\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1955,\n               species_to_plot = c(\"Common Goldeneye\",\n                                   \"Northern Shoveler\",\n                                   \"Ring-necked Duck\",\n                                   \"Surf Scoter\",\n                                   \"Bufflehead\"))\n\n\n\n\nI picked a sampling of ducks that show a trend of increasing since about the mid-1990’s. Ian Richards in Curry (2006) believes that these increases are due to warmer winters (with an increase in open water), and, for ducks like the Greater and Lesser Scaup, due to the introduced Zebra Mussel in Lake Ontario, which they feed on.\nSome of these increases are absolutely incredible! The Long-tailed Duck went from practically non-existent up to 25,000 in the mid-2000’s!\nThis is also a good reminder for me that the winter birds I think are “normal” in Hamilton (like Mallards and Long-tailed Ducks) may actually be quite recent phenomena.\n\n\nCanada Goose\nIn fact, another bird that is very common now is the Canada Goose, which I learned, as I looked through the data, was not always so common!\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1955,\n               species_to_plot = \"Canada Goose\")\n\n\n\n\nCurry (2006) talks about the Canada Goose’s history. The Canada Goose was originally considered a “symbol of wild, untamed Canada” and in the late 1800’s, Canada Geese actually avoided the Hamilton area due to “their haunts [being] invaded by trolley cars, electric lights, telegraph wires and other innovations” (Thomas McIlwraith, 1886). 🚎\nHowever, in the 1960’s, people decided to introduce the largest, heaviest sub-species of the Canada Goose into southern Ontario, because it would supposedly make Ontario “richer”. However, with few natural predators, the Giant Canada Goose has now increased in numbers and degrades habitat and competes with other, migratory sub-species.😑\n\n\nEffects of DDT\nTwo species I had often heard of having been affected by the pesticide DDT were the Double-crested Cormorant and the Bald Eagle. DDT was first used in 1947 and was finally banned in Canada in 1973. According to Curry (2006), by 1980, Bald Eagles were experiencing complete reproductive failure in southern Ontario (due to the thin eggshells).\nSo, do the numbers match up with DDT use?\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1955,\n               species_to_plot = c(\"Double-crested Cormorant\",\n                                   \"Bald Eagle\")) +\n  geom_vline(xintercept = 1973, size = 1) +\n  geom_text(x = 1980,\n            y = 90,\n            label = \"1973: DDT was \\nbanned in Canada\")\n\n\n\n\nCool! The numbers of Double-crested Cormorants and Bald Eagles did increase after DDT was banned in Canada. Yay for fewer dangerous 💀pesticides💀!\n\n\nWest Nile virus\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1955,\n               species_to_plot = c(\"American Crow\",\n                                   \"Common Raven\",\n                                   \"Blue Jay\")) +\n  geom_vline(xintercept = 2003, size = 1) +\n  geom_text(x = 2010,\n            y = 4000,\n            label = \"2003: Height of \\nWest Nile virus\")\n\n\n\n\nI decided to plot some corvids to see how their numbers have been doing, especially given that the West Nile virus happened in the early 2000’s.\nWhen I was younger, I remember having thousands of crows in my neighbourhood. Our neighbourhood even paid a guy to come with a trained hawk to scare them away. Nothing got them to leave… And then West Nile happened. For years afterwards, there were no crows, and now there are still only a few. My experience certainly matches with the count numbers.\nThe Blue Jays were also affected by West Nile, but they seem to have bounced back with no problem (according to the count numbers and my personal experience). They feed at bird feeders though, so that might be helping them.\nWhile Ravens would have also been affected by West Nile, it doesn’t seem to show in the numbers. Perhaps there were too few birds for the virus to have had much of an impact on them. Curry (2006) says that, before the early 1800’s, Ravens were common in the Hamilton area, but retreated north due to deforestation, shooting by farmers, and eating poisoned bait set out for wolves 😠. Their recent increase in numbers maybe shows they are returning to their former area!\n\n\nSnow Bunting\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1921,\n               species_to_plot = \"Snow Bunting\")\n\n\n\n\nI personally have not seen a Snow Bunting yet, but I just think their count numbers are so cool! They are an Arctic bird, so what in the world was happening in the Arctic in the 1970’s to cause such huge spikes!? Ahh, such a great mystery!\nAlso, in the 1800’s, Snow Buntings used to be called Snowflakes and there is this fantastic quote by Thomas McIlwraith in 1886 in Curry (2006), saying, “all our Canadian boys and girls are familiar with the Snowflake, which is frequently the only one they see when out for the first sleigh ride of the season.” 😄\n\n\nRuffed Grouse\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1921, \n               species_to_plot = \"Ruffed Grouse\")\n\n\n\n\nI plotted the Ruffed Grouse (aka the partridge) since 1921, and it’s clear that this bird has been pretty much gone from the Hamilton area since the late 1980’s. Curry (2006) says the Ruffed Grouse is a bird of mixed forests, and, due to intensive agriculture, woodlot harvesting and urban sprawl, the Hamilton area no longer has the right habitat for the Ruffed Grouse. 😞\n\n\nNorthern Cardinal\n\nhamilton_cbc %&gt;%\n  plot_species(start_year = 1921, \n               species_to_plot = \"Northern Cardinal\")\n\n\n\n\nI also plotted the Northern Cardinal numbers since 1921. Cardinals used to only be in Canada occasionally at Point Pelee (Canada’s most southern point), where the first recorded breeding happened in 1901. According to O’Neill (2006), the Point Pelee locals used to call these unusually-coloured birds “war birds”! 🐦\nNow they are quite common in the Hamilton area through the winter, with Curry (2006) giving the reasons of climate warming (causing less snow depth), increasing edge habitats where they like to live (due to deforestation), and more bird-feeders. 🌰 🌻\nThis is another bird I thought had always been common to the Hamilton area!\nThat is it for now, but in the next blog post, I will be making a ✨Shiny app✨ so that anyone can dig into the data!\nAnd thank you to the Christmas Bird Count! The Christmas Bird Count Data was provided by National Audubon Society and through the generous efforts of Bird Studies Canada and countless volunteers across the western hemisphere."
  },
  {
    "objectID": "posts/2019-01-07-hamilton-cbc-part-1/index.html",
    "href": "posts/2019-01-07-hamilton-cbc-part-1/index.html",
    "title": "Hamilton Christmas Bird Count: Part 1",
    "section": "",
    "text": "This is a series of five posts for this data:\n\nPart 1: data downloading and cleaning\nPart 2a: more cleaning\nPart 2b: visualizing\nPart 3: a Shiny app\nPart 4: a gganimate plot"
  },
  {
    "objectID": "posts/2019-01-07-hamilton-cbc-part-1/index.html#footnotes",
    "href": "posts/2019-01-07-hamilton-cbc-part-1/index.html#footnotes",
    "title": "Hamilton Christmas Bird Count: Part 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://news.nationalgeographic.com/news/2014/12/141227-christmas-bird-count-anniversary-audubon-animals-science/↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Sharleen (she/her) and I currently live on the lands of the Snuneymuxw and Snaw-naw-as First Nations, who have been caring for the land, water, and air since time immemorial.\nI am a Data Scientist who uses SQL, R, R Markdown/Quarto, LaTeX, and git to create data analyses, reports, visualizations, and R packages.\nWhen not programming, I like to bird, hike, climb, cook, or practice handstands."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nIn 2015, I graduated with an M.Sc. in Statistics from McMaster University.\nIn 2011, I graduated with a B.Eng.Bio. in Chemical Engineering and Bioengineering from McMaster University."
  },
  {
    "objectID": "about.html#contact-me",
    "href": "about.html#contact-me",
    "title": "About",
    "section": "Contact me",
    "text": "Contact me\nIf you’d like to contact me, my email is sharleen@fastmail.com."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sharleen’s Data Analysis Blog",
    "section": "",
    "text": "How to Remake a Blogdown Blog from Scratch\n\n\n\n\n\n\n\nblogdown\n\n\ntutorial\n\n\n\n\nWhat I learned rebuilding my blogdown blog.\n\n\n\n\n\n\nSep 2, 2020\n\n\nSharleen Weatherley\n\n\n\n\n\n\n  \n\n\n\n\nMaking tables in a PDF using R\n\n\n\n\n\n\n\nRMarkdown\n\n\nkableExtra\n\n\n\n\nA guide on making tables in PDF using RMarkdown and kableExtra.\n\n\n\n\n\n\nSep 1, 2019\n\n\nSharleen Weatherley\n\n\n\n\n\n\n  \n\n\n\n\nHamilton Christmas Bird Count: Part 4\n\n\n\n\n\n\n\ngganimate\n\n\nggplot2\n\n\nbirding\n\n\n\n\nCreating a gganimate plot for the Hamilton Christmas Bird Count data.\n\n\n\n\n\n\nMay 26, 2019\n\n\nSharleen Weatherley\n\n\n\n\n\n\n  \n\n\n\n\nHamilton Christmas Bird Count: Part 3\n\n\n\n\n\n\n\nbirding\n\n\nggplot2\n\n\nshiny\n\n\n\n\nCreating a Shiny app for the Hamilton Christmas Bird Count data.\n\n\n\n\n\n\nMar 24, 2019\n\n\nSharleen Weatherley\n\n\n\n\n\n\n  \n\n\n\n\nHamilton Christmas Bird Count: Part 2b\n\n\n\n\n\n\n\nbirding\n\n\nvisualization\n\n\n\n\nVisualizing the Hamilton Christmas Bird Count data.\n\n\n\n\n\n\nFeb 24, 2019\n\n\nSharleen Weatherley\n\n\n\n\n\n\n  \n\n\n\n\nHamilton Christmas Bird Count: Part 2a\n\n\n\n\n\n\n\ndata cleaning\n\n\nbirding\n\n\n\n\nFurther cleaning of the Hamilton Christmas Bird Count data.\n\n\n\n\n\n\nFeb 23, 2019\n\n\nSharleen Weatherley\n\n\n\n\n\n\n  \n\n\n\n\nHamilton Christmas Bird Count: Part 1\n\n\n\n\n\n\n\ndata cleaning\n\n\nbirding\n\n\n\n\nImporting and cleaning 100 years of the Hamilton Christmas Bird Count data.\n\n\n\n\n\n\nJan 7, 2019\n\n\nSharleen Weatherley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2019-02-23-hamilton-cbc-part-2a/index.html",
    "href": "posts/2019-02-23-hamilton-cbc-part-2a/index.html",
    "title": "Hamilton Christmas Bird Count: Part 2a",
    "section": "",
    "text": "This is a series of five posts for this data:\n\nPart 1: data downloading and cleaning\nPart 2a: more cleaning\nPart 2b: visualizing\nPart 3: a Shiny app\nPart 4: a gganimate plot"
  },
  {
    "objectID": "posts/2019-02-23-hamilton-cbc-part-2a/index.html#number-of-species-counted-each-year",
    "href": "posts/2019-02-23-hamilton-cbc-part-2a/index.html#number-of-species-counted-each-year",
    "title": "Hamilton Christmas Bird Count: Part 2a",
    "section": "Number of species counted each year",
    "text": "Number of species counted each year\nIn the course of creating a plot, I believe there was a error in the total hours recorded for 1982, where the total number of hours was only 64, but there was no drop in the number of species counted that year. I think it should have actually been 164 hours, because, in 1981, there were 167 hours, and in 1983, there were 168 hours. So, in the below chunk, I’ve mutated 1982 to have 164 total hours.\n\n# Mutating total_hours and how_many_counted_by_hour that depends on it\n\nhamilton_cbc &lt;- hamilton_cbc %&gt;%\n  mutate(total_hours = ifelse(year == 1982, 164, total_hours),\n         how_many_counted_by_hour = as.double(how_many_counted) / total_hours)\n\nIf you would like to download this final, cleaned dataset in .rds format, you can do so here.\nWe are now ready to visualize! Please look at the next post in this series for the visualizing!\nAnd thank you to the Christmas Bird Count! The Christmas Bird Count Data was provided by National Audubon Society and through the generous efforts of Bird Studies Canada and countless volunteers across the western hemisphere."
  },
  {
    "objectID": "posts/2019-03-24-hamilton-cbc-part-3/index.html",
    "href": "posts/2019-03-24-hamilton-cbc-part-3/index.html",
    "title": "Hamilton Christmas Bird Count: Part 3",
    "section": "",
    "text": "This is a series of five posts for this data:\n\nPart 1: data downloading and cleaning\nPart 2a: more cleaning\nPart 2b: visualizing\nPart 3: a Shiny app\nPart 4: a gganimate plot\n\n\n\nIntroduction\nThis post is to demonstrate a Shiny app I made so that people could look through the data themselves!\nI was able to make this whole app very easily thanks to the wonderful tutorial found here!\n\n\nData visualizing using a Shiny app\n❗Here is the link to my Shiny app: https://sharleenw.shinyapps.io/hamilton_cbc_shiny/❗\nAnd here is the code I used to make the app:\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(scales)\n\nmin_max &lt;- function(vector){\n  min_max &lt;- c(min(vector), max(vector))\n  return(min_max)\n}\n\nhamilton_cbc &lt;- read_rds(\"hamilton_cbc_output_part_2.rds\")\n\nspecies_list &lt;- hamilton_cbc %&gt;%\n  distinct(species) %&gt;%\n  rename(Species = species) %&gt;%\n  arrange(Species)\n\nyears_list &lt;- hamilton_cbc %&gt;%\n  distinct(year) %&gt;%\n  rename(Year = year) %&gt;%\n  arrange(-Year)\n\nyear_min_max &lt;- min_max(years_list)\n\n\nui &lt;- navbarPage(\"Hamilton Christmas Bird Count app\",\n                \n                 tabPanel(\n                   \n                   # App title ----\n                   titlePanel(tags$h4(\"Birds counted over multiple years\")),\n                   \n                   # Sidebar layout with input and output definitions ----\n                   sidebarLayout(\n                     \n                     # Sidebar panel for inputs ----\n                     sidebarPanel(\n                       \n                       # Input: which species ----\n                       selectizeInput(\"species_picked\",\n                                      multiple = TRUE,\n                                      selected = c(\"American Crow\", \"Black-capped Chickadee\", \"American Goldfinch\", \"Canada Goose\", \"American Robin\", \"Northern Cardinal\"),\n                                      label = \"Choose which species you would like to compare (up to six):\",\n                                      choices = species_list,\n                                      options = list(maxItems = 6)),\n                       \n                       \n                       # Input: Slider for the number of years ----\n                       sliderInput(\"years_picked\",\n                                   label = \"Number of years you would like to view:\",\n                                   sep = \"\",\n                                   min = year_min_max[1],\n                                   max = year_min_max[2],\n                                   value = c(1955, year_min_max[2])),\n                       \n                       helpText(tags$ol(\n                         tags$li(\"This data does not include birds counted only during count week\"),\n                         \n                         tags$li(\"This data does not include hybrids or birds that were only identified to the \\\"sp.\\\" level\"),\n                         \n                         tags$li(\"In 1955, the boundaries of the Hamilton Christmas Bird Count changed. I recommend only looking at data from 1955 onwards. However, the previous years' data have been included for completeness.\")\n                       )\n                       )\n                       \n                     ),\n                     \n                     # Main panel for displaying outputs ----\n                     mainPanel(\n                       \n                       # Output: Line graph ----\n                       plotOutput(outputId = \"time_series_plot\", height = \"800px\")\n                       \n                     )\n                   )\n                   ),\n                 \n                 \n                 tabPanel(\n                   \n                   titlePanel(tags$h4(\"Birds counted in a particular year\")),\n                   \n                   # Sidebar layout with input and output definitions ----\n                   sidebarLayout(\n                     \n                     # Sidebar panel for inputs ----\n                     sidebarPanel(\n                       \n                       # Input: which year ----\n                       selectInput(\"individual_year_picked\",\n                                   label = \"What year would you like to look at the Hamilton Christmas Bird Count data for:\",\n                                   choices = years_list)\n                       \n                     ),\n                     \n                     # Main panel for displaying outputs ----\n                     mainPanel(\n                       \n                       # Output: Data table ---- \n                       # can also do dataTableOutput\n                       tableOutput(outputId = \"count_table\")\n                       \n                     )\n                   )\n                   \n                   \n                   \n                 )\n)\n\n# Define server logic required to draw a plot and table ----\nserver &lt;- function(input, output) {\n  \n  # First navbar output ----\n  data_input &lt;- reactive({\n    \n    hamilton_cbc %&gt;% \n      filter(year &gt;= req(input$years_picked[1]),\n             year &lt;= req(input$years_picked[2]),\n             species %in% req(input$species_picked))\n    \n  })\n  \n  output$time_series_plot &lt;- renderPlot({\n    \n    \n    plotting_function &lt;- function(input_for_plot){\n      \n      input_for_plot %&gt;%\n        ggplot(aes(x = year, y = how_many_counted, color = species)) +\n        geom_line(size = 1) +\n        xlab(\"Year\") +\n        ylab(\"Number counted\") +\n        theme_minimal() +\n        theme(text = element_text(size = 18),\n              legend.position = \"none\",\n              plot.margin = margin(2, 20, 2, 2)) +\n        facet_wrap(vars(species),\n                   scales = \"free\",\n                   dir = \"v\") +\n        scale_y_continuous(labels = comma)\n      \n    }\n    \n    plotting_function(data_input())\n\n  })\n  \n  \n  # Second navbar output ----\n  \n  output$count_table &lt;- renderTable({\n    \n    hamilton_cbc %&gt;%\n      filter(year == input$individual_year_picked) %&gt;%\n      count(species, how_many_counted) %&gt;%\n      select(-n) %&gt;%\n      arrange(-how_many_counted) %&gt;%\n      filter(how_many_counted &gt; 0) %&gt;%\n      mutate(how_many_counted = how_many_counted %&gt;%\n               scales::number(big.mark = \",\", accuracy = 1)) %&gt;%\n      rename(Species = species, `How many were counted` = how_many_counted)\n    \n  },\n  \n  align = \"lr\")\n}\n\nshinyApp(ui = ui, server = server)\n\nAnd thank you to the Christmas Bird Count! The Christmas Bird Count Data was provided by National Audubon Society and through the generous efforts of Bird Studies Canada and countless volunteers across the western hemisphere.\n\n\n\nSession info\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       America/Vancouver\n date     2023-07-27\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.3.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n devtools    * 2.4.5      2022-10-11 [1] CRAN (R 4.3.1)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.2      2023-04-20 [1] CRAN (R 4.3.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emo         * 0.0.0.9000 2023-07-22 [1] Github (hadley/emo@3f03b11)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.3.0)\n fansi         1.0.4      2023-01-22 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.2      2023-04-25 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2     * 3.4.2      2023-04-03 [1] CRAN (R 4.3.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gtable        0.3.3      2023-03-21 [1] CRAN (R 4.3.0)\n here        * 1.0.1      2020-12-13 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httpuv        1.6.10     2023-05-08 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.3.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate     1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n processx      3.8.1      2023-04-18 [1] CRAN (R 4.3.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.3.0)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr         1.0.1      2023-01-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n remotes       2.4.2      2021-11-30 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21       2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.3.0)\n scales      * 1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n shiny       * 1.7.4      2022-12-15 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr       1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.3.0)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis     * 2.2.2      2023-07-06 [1] CRAN (R 4.3.1)\n utf8          1.2.3      2023-01-31 [1] CRAN (R 4.3.0)\n vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.3.0)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.39       2023-04-20 [1] CRAN (R 4.3.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/sharl/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2019-09-01-tables-in-pdf/index.html",
    "href": "posts/2019-09-01-tables-in-pdf/index.html",
    "title": "Making tables in a PDF using R",
    "section": "",
    "text": "Today we will be making this in a PDF, starting from a tidy data frame of city population data:\n\n\n\nImage of the pdf that we will be making"
  },
  {
    "objectID": "posts/2019-09-01-tables-in-pdf/index.html#data-import",
    "href": "posts/2019-09-01-tables-in-pdf/index.html#data-import",
    "title": "Making tables in a PDF using R",
    "section": "Data import",
    "text": "Data import\nHere is the R code where I import the CSV file I created (\"wiki_data.csv\"). Underneath the code, I’ve displayed what the raw data file looks like.\n\nlibrary(dplyr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(readr)\n\nwiki_data_raw &lt;- read_csv(here::here(\"posts\",\n                                     \"2019-09-01-tables-in-pdf\",\n                                     \"wiki_data.csv\")) %&gt;%\n  clean_names()\n\nwiki_data_raw %&gt;%\n  head()\n\n# A tibble: 6 × 7\n   rank population_centre    province      population_in_2016 population_in_2011\n  &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;                      &lt;dbl&gt;              &lt;dbl&gt;\n1     1 \"Toronto\"            Ontario                  5429524            5144412\n2     2 \"Montreal\"           Quebec                   3519595            3387653\n3     3 \"Vancouver\"          British Colu…            2264823            2124443\n4     4 \"Calgary\"            Alberta                  1237656            1094379\n5     5 \"Edmonton\"           Alberta                  1062643             935361\n6     6 \"Ottawa\\x96Gatineau\" Ontario/Queb…             989657             945592\n# ℹ 2 more variables: percent_change &lt;chr&gt;, class &lt;chr&gt;"
  },
  {
    "objectID": "posts/2019-09-01-tables-in-pdf/index.html#data-cleaning",
    "href": "posts/2019-09-01-tables-in-pdf/index.html#data-cleaning",
    "title": "Making tables in a PDF using R",
    "section": "Data cleaning",
    "text": "Data cleaning\nI am only interested in the province of each city and what its population was in 2011 and 2016, so my first step in cleaning will be to select only those three columns. I will then use group_by and summarize to get the number of cities and populations on a per-province basis.\n\nwiki_data_by_province &lt;- wiki_data_raw %&gt;%\n  select(province,\n         population_2016 = population_in_2016,\n         population_2011 = population_in_2011) %&gt;%\n   # Since some provinces were actually two provinces put together\n   # (e.g., \"Alberta/Saskatchewan\"), I used regex code from this website\n   # (https://www.perlmonks.org/?node_id=908348) to get everything before\n   # the first forward slash in the string\n  mutate(province = str_extract(province, \"^([^\\\\/]+)\")) %&gt;%\n  group_by(province) %&gt;%\n  summarize(number_of_cities_in_top_100 = n(),\n            pop_of_largest_cities_2011 = sum(population_2011),\n            pop_of_largest_cities_2016 = sum(population_2016))\n\nwiki_data_by_province\n\n# A tibble: 10 × 4\n   province number_of_cities_in_…¹ pop_of_largest_citie…² pop_of_largest_citie…³\n   &lt;chr&gt;                     &lt;int&gt;                  &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Alberta                      13                2538547                2891712\n 2 British…                     14                3254203                3471292\n 3 Manitoba                      2                 715649                 760249\n 4 New Bru…                      4                 244910                 250811\n 5 Newfoun…                      1                 172312                 178427\n 6 Nova Sc…                      2                 335154                 346605\n 7 Ontario                      39               10140286               10659522\n 8 Prince …                      1                  41613                  44739\n 9 Quebec                       20                5140554                5337846\n10 Saskatc…                      4                 479228                 527638\n# ℹ abbreviated names: ¹​number_of_cities_in_top_100,\n#   ²​pop_of_largest_cities_2011, ³​pop_of_largest_cities_2016\n\n\nSince I also want a “Total” row for all of Canada, I will take the above wiki_data_by_province tibble and I will summarize the three columns in a new tibble to get the total sums for the number of cities and their populations in 2011 and 2016. Since using summarize means I lose the province variable, I will recreate it using mutate to have a value of “Canada”.\n\nwiki_data_total_row &lt;- wiki_data_by_province %&gt;%\n  summarize(number_of_cities_in_top_100 = sum(number_of_cities_in_top_100),\n            pop_of_largest_cities_2011 = sum(pop_of_largest_cities_2011),\n            pop_of_largest_cities_2016 = sum(pop_of_largest_cities_2016)) %&gt;%\n  mutate(province = \"Canada\")\n\nwiki_data_total_row\n\n# A tibble: 1 × 4\n  number_of_cities_in_t…¹ pop_of_largest_citie…² pop_of_largest_citie…³ province\n                    &lt;int&gt;                  &lt;dbl&gt;                  &lt;dbl&gt; &lt;chr&gt;   \n1                     100               23062456               24468841 Canada  \n# ℹ abbreviated names: ¹​number_of_cities_in_top_100,\n#   ²​pop_of_largest_cities_2011, ³​pop_of_largest_cities_2016\n\n\nNow I want to merge both the wiki_data_by_province tibble and the wiki_data_total_row tibble on top of one another (using bind_rows). This will be the table that I will save and then read into my .Rmd file in order to create the table in PDF.\n\nwiki_data_final_table &lt;- wiki_data_by_province %&gt;%\n  bind_rows(wiki_data_total_row) %&gt;%\n  # This mutate_at\n  # (created using code from https://suzan.rbind.io/2018/02/dplyr-tutorial-2/#mutate-at-to-change-specific-columns)\n  # converts all variables containing the word \"pop\" to have commas separating the thousands.\n  mutate_at(vars(contains(\"pop\")),\n            list(. %&gt;%\n                   scales::comma()))\n\nwiki_data_final_table\n\n# A tibble: 11 × 4\n   province number_of_cities_in_…¹ pop_of_largest_citie…² pop_of_largest_citie…³\n   &lt;chr&gt;                     &lt;int&gt; &lt;chr&gt;                  &lt;chr&gt;                 \n 1 Alberta                      13 2,538,547              2,891,712             \n 2 British…                     14 3,254,203              3,471,292             \n 3 Manitoba                      2 715,649                760,249               \n 4 New Bru…                      4 244,910                250,811               \n 5 Newfoun…                      1 172,312                178,427               \n 6 Nova Sc…                      2 335,154                346,605               \n 7 Ontario                      39 10,140,286             10,659,522            \n 8 Prince …                      1 41,613                 44,739                \n 9 Quebec                       20 5,140,554              5,337,846             \n10 Saskatc…                      4 479,228                527,638               \n11 Canada                      100 23,062,456             24,468,841            \n# ℹ abbreviated names: ¹​number_of_cities_in_top_100,\n#   ²​pop_of_largest_cities_2011, ³​pop_of_largest_cities_2016\n\n\nNow I will save the wiki_data_final_table tibble as an .rds file so that I can read it into my .Rmd file.\n\nwiki_data_final_table %&gt;%\n  saveRDS(here::here(\"posts\",\n                     \"2019-09-01-tables-in-pdf\",\n                     \"cleaned_wiki_data_for_table.rds\"))"
  },
  {
    "objectID": "posts/2019-09-01-tables-in-pdf/index.html#creating-the-tables-in-pdf",
    "href": "posts/2019-09-01-tables-in-pdf/index.html#creating-the-tables-in-pdf",
    "title": "Making tables in a PDF using R",
    "section": "Creating the tables in PDF",
    "text": "Creating the tables in PDF\nBelow is the .Rmd file that reads in the wiki_data_final_table tibble and uses the kable and kableExtra packages in order to get the table to look the way I want it to.\nAlso, notice that in the YAML, my output format is bookdown::pdf_document2. This allows me to cross-reference my tables with the text of my document.\nSo, what’s the real secret to creating tables in PDF from RMarkdown?\nThe secret is…\nThe document Create Awesome LaTeX Table with knitr::kable and kableExtra, written by Hao Zhu! It’s got everything you need in order to make fantastic tables in PDF using RMarkdown.\n❗**To see the final PDF of the below .Rmd file, click here❗\n\n---\ntitle: 'The top 100 cities in Canada'\noutput: \n  bookdown::pdf_document2:\n    toc: no\n    number_sections: FALSE\n    keep_tex: TRUE\nalways_allow_html: yes\ngeometry: \"left=1.5cm,right=7cm,top=2cm,bottom=2cm\"\n\n---\n\n{r setup, include=FALSE}\n\nknitr::opts_chunk$set(echo = FALSE,\n                      warning = FALSE,\n                      message = FALSE,\n                      out.width= \"8.5in\")\n\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\n\n# Colours for the table\nblue_table_colour &lt;- \"#9BD4F5\"\n\norange_table_colour &lt;- \"#FF9000\"\n\nlight_striping_table_colour &lt;- \"#DDDDDD\"\n\n\n{r import-cleaned-data}\n\nwiki_data_final_table &lt;- readRDS(here::here(\"posts\",\n                                            \"2019-09-01-tables-in-pdf\",\n                                            \"cleaned_wiki_data_for_table.rds\"))\n\n\nTable @ref(tab:table-population-by-province) shows the populations of each province and of Canada in total for the years 2011 and 2016 (this data includes only the top 100 largest cities in Canada).\n\n{r table-population-by-province}\n\nwiki_data_final_table %&gt;%\n  knitr::kable(\n    \"latex\",\n    booktabs = TRUE,\n    linesep = \"\",\n    caption = \"Number of cities and population of each province (including only the largest 100 cities in Canada)\",\n    col.names = c(\"Province\", \"Number of largest 100 cities in this province\", rep(c(\"2011\", \"2016\"), 1)),\n    align = c(\"l\", rep(\"r\", 3))) %&gt;%\n  kable_styling(latex_options = \"HOLD_position\") %&gt;%  # This line holds the table where you want it, so LaTeX won't move it around\n  add_header_above(\n    c(\" \" = 1,  # There has to be a space here, like this \" \", and not like this \"\"\n      \" \" = 1,\n      \"Population\" = 2),\n    bold = TRUE,\n    line = FALSE,\n    background = blue_table_colour\n  ) %&gt;%\n  column_spec(1,\n              width = \"6cm\") %&gt;%\n  column_spec(2:4,\n              width = \"3cm\") %&gt;%\n  footnote(general = \"There are other cities in Canada not included in this table; the excluded cities are those smaller than the 100 largest cities in Canada.\",\n           threeparttable = TRUE,\n           general_title = \"Footnote:\") %&gt;%\n  row_spec(\n    row = 0,\n    background = blue_table_colour,\n    bold = TRUE,\n    align = \"c\"\n  ) %&gt;%\n  row_spec(\n    row = c(2,4,6,8,10),\n    background = light_striping_table_colour\n  ) %&gt;%\n  row_spec(\n    row = 11,\n    background = orange_table_colour,\n    bold = TRUE\n  ) %&gt;%\n  row_spec(\n    row = 10,\n    hline_after = TRUE)  # This hline unfortunately gets hidden by the orange colouring of the final row, so this line of code doesn't really do anything :("
  }
]