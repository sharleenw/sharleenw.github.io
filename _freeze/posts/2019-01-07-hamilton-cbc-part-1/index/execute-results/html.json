{
  "hash": "868b597c20c88dd8d4bdb1fc5ed6de7f",
  "result": {
    "markdown": "---\ntitle: 'Hamilton Christmas Bird Count: Part 1'\nauthor: Sharleen Weatherley\ndate: '2019-01-07'\ndescription: Importing and cleaning 100 years of the Hamilton Christmas Bird Count data.\nimage: \"image.jpg\"\nimage-alt: \"A Black-capped Chickadee on a branch (Source: Public Domain Pictures)\"\ncategories: [data cleaning, birding]\n---\n\n::: {.cell}\n\n:::\n\n\n::: {.well .alert .alert-info role=\"alert\"}\nThis is a series of five posts for this data:\n\n-   [Part 1](../2019-01-07-hamilton-cbc-part-1/): data downloading and cleaning\n\n-   [Part 2a](../2019-02-23-hamilton-cbc-part-2a/): more cleaning\n\n-   [Part 2b](../2019-02-24-hamilton-cbc-part-2b/): visualizing\n\n-   [Part 3](../2019-03-24-hamilton-cbc-part-3/): a Shiny app\n\n-   [Part 4](../2019-05-26-hamilton-cbc-part-4/): a `gganimate` plot\n:::\n\n# Introduction\n\nAbout two years ago, I was taking my dog for a walk through a park and I began to notice the birds and how fascinating they were! üê¶ I began regularly going out birding (aka \"bird-watching\") and reading up on these cool little flying dinosaurs.\n\nIt turns out there's a lot of data in the birding world as well. Birding attracts the sort of detail-oriented person who likes to count and record stuff.\n\nSo there are opportunities to get involved in citizen science projects, including a long-running project called the Christmas Bird Count (CBC). It started in 1900, when Frank Chapman, an ornithologist, came up with the idea of counting birds as an alternative to hunting them at Christmas (hunting them being the previous tradition).[^1]\n\n[^1]: https://news.nationalgeographic.com/news/2014/12/141227-christmas-bird-count-anniversary-audubon-animals-science/\n\nBirders have been going out every year around Christmas, to spend the day walking, biking, or driving through a census area to count all the birds they see or hear.\n\nFor the past two years, I have gone out with Hamilton's Christmas Bird Count. I learn a lot while I'm out there and it feels like we are contributing to a larger purpose because of the data we are collecting.\n\nSo I thought I would look at the data and see what it could tell me!\n\nSpecifically, I've noticed birders will say things like, \"the House Sparrows are getting worse every year\" or, \"the number of Bald Eagles has increased\", and I was wondering if the Christmas Bird Count data would agree or disagree with those statements.\n\nTo access the data, I went on the [Bird Studies Canada](https://www.birdscanada.org/index.jsp) website, clicked on Citizen Science, then Christmas Bird Count, then CBC Audubon Database, and then Historical Results by Count. I downloaded all years of data that existed for the Hamilton count.\n\nIf you would like to directly access the csv file that I used from my Github page, [here](https://raw.githubusercontent.com/sharleenw/sharleenw.github.io/main/posts/2019-01-07-hamilton-cbc-part-1/hamilton-cbc-all-years-csv.csv) it is!\n\n# Data import\n\nI started by loading all of the packages I will be using and reading in the data using the [`readr`](https://readr.tidyverse.org/) and [`here`](https://malco.io/2018/11/05/why-should-i-use-the-here-package/) packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(janitor)\nlibrary(readr)\nlibrary(naniar)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(here)\n\nhamilton_cbc <- read_csv(here::here(\n  \"posts\",\n  \"2019-01-07-hamilton-cbc-part-1\",\n  \"hamilton-cbc-all-years-csv.csv\"))\n```\n:::\n\n\n# Data cleaning\n\nAs shown below, it turns out that the first row just gives information about the count name and latitude/longitude, so I extracted those two pieces of information as `current_circle_name` and `lat_long` and then [`slice`](https://dplyr.tidyverse.org/reference/slice.html)d the file so that the first two lines were excluded from the dataset. I then used `clean_names` from the [`janitor`](https://www.rdocumentation.org/packages/janitor/versions/1.1.1/topics/clean_names) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 9\n  CircleName Abbrev        LatLong           ...4  ...5  ...6  ...7  ...8  ...9 \n  <chr>      <chr>         <chr>             <chr> <chr> <chr> <chr> <chr> <chr>\n1 Hamilton   ONHA          43.2678790000/-7‚Ä¶ <NA>  <NA>  <NA>   <NA> <NA>  <NA> \n2 <NA>       <NA>          <NA>              <NA>  <NA>  <NA>   <NA> <NA>  <NA> \n3 CountYear3 LowTemp       HighTemp          AMCl‚Ä¶ PMCl‚Ä¶ AMRa‚Ä¶ \"PMR‚Ä¶ AMSn‚Ä¶ PMSn‚Ä¶\n4 118        -18.0 Celsius -13.0 Celsius     Clear Clear None  \"Non‚Ä¶ None  None \n5 117        -2.0 Celsius  11.0 Celsius      Clou‚Ä¶ Clou‚Ä¶ Light \"Hea‚Ä¶ None  None \n6 116        -2.0 Celsius  5.0 Celsius       Part‚Ä¶ Part‚Ä¶ None  \"Lig‚Ä¶ None  None \n```\n:::\n\n```{.r .cell-code}\ncurrent_circle_name <- hamilton_cbc[1, 1]\nlat_long <- hamilton_cbc[1, 3]\n\nhamilton_cbc <- hamilton_cbc %>%\n  slice(3 : n())\n\nhamilton_cbc <- hamilton_cbc %>%\n  clean_names()\n```\n:::\n\n\nSince I played around with the data before writing this, I know that there are actually six tables in this dataset.\n\nThe first three tables contain count day weather data. A lot of the weather data is missing and inconsistent. I will remove these three tables from `hamilton_cbc`.\n\nHere is the end of the first table and the start of the second table. Notice the line of `NA`s between the two tables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>%\n  slice(47:54)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 √ó 9\n  circle_name abbrev     lat_long  x4       x5        x6      x7     x8    x9   \n  <chr>       <chr>      <chr>     <chr>    <chr>     <chr>   <chr>  <chr> <chr>\n1 66          10         25        Clear    Clear     Unknown Unkno‚Ä¶ Unkn‚Ä¶ Unkn‚Ä¶\n2 65          18         31        Cloudy   Cloudy    Unknown Unkno‚Ä¶ Unkn‚Ä¶ Unkn‚Ä¶\n3 64          26         34        Cloudy   Cloudy    Unknown Unkno‚Ä¶ Unkn‚Ä¶ Unkn‚Ä¶\n4 63          21         36        Cloudy   Cloudy    Unknown Unkno‚Ä¶ Unkn‚Ä¶ Unkn‚Ä¶\n5 <NA>        <NA>       <NA>      <NA>     <NA>      <NA>    <NA>   <NA>  <NA> \n6 CountYear5  LowTemp3   HighTemp2 AMCloud2 PMClouds2 <NA>    <NA>   <NA>  <NA> \n7 118         12/26/2017 85        198.75   100       <NA>    <NA>   <NA>  <NA> \n8 117         12/26/2016 95        216.65   97        <NA>    <NA>   <NA>  <NA> \n```\n:::\n:::\n\n\nHere is the end of the second table and the start of the third table. Notice the line of `NA`s between the two tables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>% \n  slice(143:150)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 √ó 9\n  circle_name abbrev                lat_long x4    x5    x6    x7    x8    x9   \n  <chr>       <chr>                 <chr>    <chr> <chr> <chr> <chr> <chr> <chr>\n1 26          12/26/1925            10       <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n2 25          12/27/1924            8        <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n3 23          12/26/1922            9        <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n4 22          12/23/1921            2        8     <NA>  <NA>  <NA>  <NA>  <NA> \n5 <NA>        <NA>                  <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n6 CountYear4  LowTemp2              <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n7 118         Hamilton Naturalists‚Ä¶ <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n8 117         Hamilton Naturalists‚Ä¶ <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n```\n:::\n:::\n\n\nHere is the end of the third table and the start of the fourth table. Notice that there is a line of `NA`s between the two tables. The fourth table is where the bird count data actually starts!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>%\n  slice(239:246)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 √ó 9\n  circle_name                abbrev lat_long x4    x5    x6    x7    x8    x9   \n  <chr>                      <chr>  <chr>    <chr> <chr> <chr> <chr> <chr> <chr>\n1 \"26\"                        <NA>  <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n2 \"25\"                        <NA>  <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n3 \"23\"                        <NA>  <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n4 \"22\"                        <NA>  <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n5  <NA>                       <NA>  <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n6 \"COM_NAME\"                 \"Coun‚Ä¶ how_man‚Ä¶ Numb‚Ä¶ Flags <NA>  <NA>  <NA>  <NA> \n7 \"Snow Goose\\r\\n[Chen caer‚Ä¶ \"1921‚Ä¶ <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n8 \"Snow Goose\\r\\n[Chen caer‚Ä¶ \"1922‚Ä¶ <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n```\n:::\n:::\n\n\nThe last two tables of the six tables contain the names of the people who went out counting each year. I will also remove these two tables.\n\nSince the tables are separated by having a line of `NA`'s in between each table, I will first figure out which rows are a line of NAs. Then I will only keep the rows of the fourth table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblank_lines <- hamilton_cbc %>%\n  mutate(row_num = row_number()) %>%\n  filter(is.na(circle_name))\n\nblank_lines\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 10\n  circle_name abbrev lat_long x4    x5    x6    x7    x8    x9    row_num\n  <chr>       <chr>  <chr>    <chr> <chr> <chr> <chr> <chr> <chr>   <int>\n1 <NA>        <NA>   <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>       51\n2 <NA>        <NA>   <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>      147\n3 <NA>        <NA>   <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>      243\n4 <NA>        <NA>   <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>    23463\n5 <NA>        <NA>   <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>    23473\n```\n:::\n\n```{.r .cell-code}\nstarting_line <- blank_lines %>%\n  filter(row_number() == 3) %>%\n  pull(row_num)\n\nending_line <- blank_lines %>%\n  filter(row_number() == 4) %>%\n  pull(row_num)\n```\n:::\n\n\nSo, with those values of `starting_line` and `ending_line`, we can `slice` our dataset to only have the rows between those two values. Here's what it looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc <- hamilton_cbc %>%\n  # Only keep the rows within the fourth table\n  slice((starting_line + 1):(ending_line - 1))\n\nhamilton_cbc %>%\n  head(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 9\n  circle_name                abbrev lat_long x4    x5    x6    x7    x8    x9   \n  <chr>                      <chr>  <chr>    <chr> <chr> <chr> <chr> <chr> <chr>\n1 \"COM_NAME\"                 \"Coun‚Ä¶ how_man‚Ä¶ Numb‚Ä¶ Flags <NA>  <NA>  <NA>  <NA> \n2 \"Snow Goose\\r\\n[Chen caer‚Ä¶ \"1921‚Ä¶ <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n3 \"Snow Goose\\r\\n[Chen caer‚Ä¶ \"1922‚Ä¶ <NA>     <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n```\n:::\n\n```{.r .cell-code}\nhamilton_cbc %>%\n  tail(n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 9\n  circle_name                abbrev lat_long x4    x5    x6    x7    x8    x9   \n  <chr>                      <chr>  <chr>    <chr> <chr> <chr> <chr> <chr> <chr>\n1 \"House Sparrow\\r\\n[Passer‚Ä¶ \"2015‚Ä¶ 2326     10.5‚Ä¶ <NA>  <NA>  <NA>  <NA>  <NA> \n2 \"House Sparrow\\r\\n[Passer‚Ä¶ \"2016‚Ä¶ 2565     11.8‚Ä¶ <NA>  <NA>  <NA>  <NA>  <NA> \n3 \"House Sparrow\\r\\n[Passer‚Ä¶ \"2017‚Ä¶ 2731     13.7‚Ä¶ <NA>  <NA>  <NA>  <NA>  <NA> \n```\n:::\n:::\n\n\nYou can see that the table starts with Snow Goose data from 1921 and goes until House Sparrow data in 2017.\n\nNow we can clean this dataset up a bit more using the `janitor` package ‚ù§Ô∏è! This package will remove any empty columns, convert the top row to the column names of the dataset and it will clean the names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Janitor package to the rescue!\nhamilton_cbc <- hamilton_cbc %>%\n  janitor::remove_empty(which = \"cols\") %>%  \n  janitor::row_to_names(row_number = 1) %>%\n  janitor::clean_names() %>%\n  rename(species = com_name)\n\nhamilton_cbc %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  species                     count_year how_many_cw number_by_party_hours flags\n  <chr>                       <chr>      <chr>       <chr>                 <chr>\n1 \"Snow Goose\\r\\n[Chen caeru‚Ä¶ \"1921 [22‚Ä¶ <NA>        <NA>                  <NA> \n2 \"Snow Goose\\r\\n[Chen caeru‚Ä¶ \"1922 [23‚Ä¶ <NA>        <NA>                  <NA> \n3 \"Snow Goose\\r\\n[Chen caeru‚Ä¶ \"1924 [25‚Ä¶ <NA>        <NA>                  <NA> \n4 \"Snow Goose\\r\\n[Chen caeru‚Ä¶ \"1925 [26‚Ä¶ <NA>        <NA>                  <NA> \n5 \"Snow Goose\\r\\n[Chen caeru‚Ä¶ \"1926 [27‚Ä¶ <NA>        <NA>                  <NA> \n6 \"Snow Goose\\r\\n[Chen caeru‚Ä¶ \"1928 [29‚Ä¶ <NA>        <NA>                  <NA> \n```\n:::\n:::\n\n\n-   `species` gives the species name in English and the scientific name, in parentheses\n-   `count_year` data has a lot of information that we will parse out in a moment\n-   `how_many_cw` provides the actual bird count\n-   `number_by_party_hours` is how many birds were counted divided by the number of person-hours that year\n-   `flags` contains values like `US` for \"unusual\" bird (as per the Christmas Bird Count [documentation](https://www.audubon.org/sites/default/files/documents/compilers_manual_0.pdf))\n\nNow we do some regex!\n\nFirst, I want to split up the `species` variable into the common `species` name and the scientific `species_latin` name.\n\nFor the first mutate: I will use `@kohske`'s regex I found on [StackOverflow](https://stackoverflow.com/questions/8613237/extract-info-inside-all-parenthesis-in-r), which, as Nettle writes:\n\n> I like @kohske's regex, which looks behind for an open parenthesis ?\\<=\\\\(, looks ahead for a closing parenthesis ?=\\\\), and grabs everything in the middle (lazily) .+?, in other words (?\\<=\\\\().+?(?=\\\\)) s\n\nFor the second mutate: As you can see in the code below, there is a line break (`\\n`) between every English name and every scientific name in `species`. We will use that to parse out the scientific name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>% \n  filter(row_number() == 1) %>% \n  pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Snow Goose\\r\\n[Chen caerulescens]\"\n```\n:::\n:::\n\n\nHere are the two `mutate`s together:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Putting it together: Mutating the two variables\nhamilton_cbc <- hamilton_cbc %>%\n  mutate(species_latin = str_extract(species, \"(?<=\\\\[).+?(?=\\\\])\"),\n         species = word(species, start = 1, sep = fixed('\\n[')))\n```\n:::\n\n\nNow we will look at the `count_year` variable. Let's get a sense of what the variable looks like, using the White-Breasted Nuthatch count in 2016:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>% \n  filter(row_number() == 15133) %>% \n  pull(count_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016 [117]\\r\\nCount Date: 12/26/2016\\r\\n# Participants: 1\\r\\n# Species Reported: 97\\r\\nTotal Hrs.: 216.65\"\n```\n:::\n:::\n\n\nThe `count_year` variable is actually several variables in one:\n\n-   calendar year\n-   \\[CBC count number\\]\n-   calendar count date\n-   number of participants\n-   number of species reported\n-   total hours spent that year on the count\n\nThis is all metadata and we can take most of it out of this dataset. The only variable we will keep in the `hamilton_cbc` dataset is the calendar year.\n\nAnd where are we at with the `hamilton_cbc` dataset?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>%\n  tail()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n  species       count_year how_many_cw number_by_party_hours flags species_latin\n  <chr>         <chr>      <chr>       <chr>                 <chr> <chr>        \n1 \"House Sparr‚Ä¶ \"2012 [11‚Ä¶ 1473        7.5713                <NA>  Passer domes‚Ä¶\n2 \"House Sparr‚Ä¶ \"2013 [11‚Ä¶ 1802        9.8902                <NA>  Passer domes‚Ä¶\n3 \"House Sparr‚Ä¶ \"2014 [11‚Ä¶ 1318        7.3529                <NA>  Passer domes‚Ä¶\n4 \"House Sparr‚Ä¶ \"2015 [11‚Ä¶ 2326        10.5249               <NA>  Passer domes‚Ä¶\n5 \"House Sparr‚Ä¶ \"2016 [11‚Ä¶ 2565        11.8394               <NA>  Passer domes‚Ä¶\n6 \"House Sparr‚Ä¶ \"2017 [11‚Ä¶ 2731        13.7409               <NA>  Passer domes‚Ä¶\n```\n:::\n:::\n\n\nLet's clean up the variables a bit more:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc <- hamilton_cbc %>%\n  rename(participant_info = count_year,\n         how_many_counted = how_many_cw) %>%\n  mutate(year = as.integer(word(participant_info)),  # We will keep year and total_hours\n         total_hours = as.double(\n           str_extract(\n             participant_info, \"(?<=Hrs\\\\.:\\\\s).*$\")))\n```\n:::\n\n\nWe almost have a clean dataset! ‚ú®\n\nI am going to remove the `flags` variable. I am also going to remove `number_by_party_hours` and derive it myself instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc <- hamilton_cbc %>%\n  select(year, species, species_latin, how_many_counted, total_hours)\n```\n:::\n\n\nIt turns out that `how_many_counted` also has a `cw` value, which means the bird was not seen on count day itself, but was seen on a day close to the count. I am going to set these bird counts to be `NA`, as they don't have a specified value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc <- hamilton_cbc %>%\n  mutate(how_many_counted = ifelse(how_many_counted == \"cw\", NA, how_many_counted),\n         how_many_counted = as.integer(how_many_counted))\n```\n:::\n\n\nIn the `species` variable, there are some rows that are identified only to the genus level (and not to the species level). I will exclude these records, as I believe [eBird](https://ebird.org/home) excludes them too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>%\nfilter(str_detect(species, \"sp\\\\.\")) %>%\ndistinct(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 √ó 1\n   species            \n   <chr>              \n 1 \"scoter sp.\\r\"     \n 2 \"duck sp.\\r\"       \n 3 \"loon sp.\\r\"       \n 4 \"Accipiter sp.\\r\"  \n 5 \"hawk sp.\\r\"       \n 6 \"eagle sp.\\r\"      \n 7 \"jaeger sp.\\r\"     \n 8 \"gull sp.\\r\"       \n 9 \"screech-owl sp.\\r\"\n10 \"owl sp.\\r\"        \n# ‚Ñπ 15 more rows\n```\n:::\n\n```{.r .cell-code}\nhamilton_cbc <- hamilton_cbc %>%\n  filter(!(str_detect(species, \"sp\\\\.\")))\n```\n:::\n\n\nTwo final mutates:\n\n-   Using `tidyr`'s [`replace_na`](https://rdrr.io/cran/tidyr/man/replace_na.html) function, let's make all of the `NA`s equal to 0 for `how_many_counted`. That means we are assuming that all birds in the area were successfully counted on count day.\n-   Let's also calculate the number of birds counted (within each species) divided by the total number of count hours that happened that year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc <- hamilton_cbc %>%\n  mutate(how_many_counted = replace_na(how_many_counted, 0),\n         how_many_counted_by_hour = as.double(how_many_counted) / total_hours)\n```\n:::\n\n\nAnd that's it! üòÑ üéâ We have cleaned the dataset and are ready to do some visualizing üëÄ in Part 2!\n\n# Final dataset\n\nHere is a glimpse of our final dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhamilton_cbc %>%\n  tail()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n   year species           species_latin     how_many_counted total_hours\n  <int> <chr>             <chr>                        <int>       <dbl>\n1  2012 \"House Sparrow\\r\" Passer domesticus             1473        195.\n2  2013 \"House Sparrow\\r\" Passer domesticus             1802        182.\n3  2014 \"House Sparrow\\r\" Passer domesticus             1318        179.\n4  2015 \"House Sparrow\\r\" Passer domesticus             2326        221 \n5  2016 \"House Sparrow\\r\" Passer domesticus             2565        217.\n6  2017 \"House Sparrow\\r\" Passer domesticus             2731        199.\n# ‚Ñπ 1 more variable: how_many_counted_by_hour <dbl>\n```\n:::\n:::\n\n\n\n\nAnd thank you to the CBC! The CBC Data was provided by [National Audubon Society](www.christmasbirdcount.org) and through the generous efforts of [Bird Studies Canada](www.bsc-eoc.org) and countless volunteers across the western hemisphere.\n\n<hr>\n\n# Session info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       Pacific/Honolulu\n date     2023-09-21\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n bit           4.0.5      2022-11-15 [1] CRAN (R 4.3.0)\n bit64         4.0.5      2020-08-30 [1] CRAN (R 4.3.0)\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.3.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n devtools    * 2.4.5      2022-10-11 [1] CRAN (R 4.3.1)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.2      2023-04-20 [1] CRAN (R 4.3.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emo         * 0.0.0.9000 2023-07-22 [1] Github (hadley/emo@3f03b11)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.3.0)\n fansi         1.0.4      2023-01-22 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.2      2023-04-25 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2       3.4.3      2023-08-14 [1] CRAN (R 4.3.1)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gtable        0.3.3      2023-03-21 [1] CRAN (R 4.3.0)\n here        * 1.0.1      2020-12-13 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httpuv        1.6.11     2023-05-11 [1] CRAN (R 4.3.1)\n janitor     * 2.2.0      2023-02-02 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.3.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate   * 1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n naniar      * 1.0.0      2023-02-02 [1] CRAN (R 4.3.1)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n processx      3.8.1      2023-04-18 [1] CRAN (R 4.3.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.3.0)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr         1.0.1      2023-01-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n remotes       2.4.2      2021-11-30 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21       2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.1)\n scales        1.2.1      2022-08-20 [1] CRAN (R 4.3.1)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n shiny         1.7.4      2022-12-15 [1] CRAN (R 4.3.0)\n snakecase     0.11.0     2019-05-25 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr       * 1.3.0      2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.3.0)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis     * 2.2.2      2023-07-06 [1] CRAN (R 4.3.1)\n utf8          1.2.3      2023-01-31 [1] CRAN (R 4.3.0)\n vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.3.0)\n visdat        0.6.0      2023-02-02 [1] CRAN (R 4.3.1)\n vroom         1.6.3      2023-04-28 [1] CRAN (R 4.3.0)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.39       2023-04-20 [1] CRAN (R 4.3.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/sharl/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}