{
  "hash": "017af0095a762d2da20a891c8bf7414d",
  "result": {
    "markdown": "---\ntitle: 'Making tables in a PDF using R'\nauthor: Sharleen Weatherley\ndate: '2019-09-01'\ndescription: A guide on making tables in PDF using RMarkdown and kableExtra.\nimage: \"image.jpg\"\nimage-alt: \"View of Toronto from the water (Source: Unsplash)\"\ncategories: [RMarkdown, kableExtra]\n---\n\n::: {.cell}\n\n:::\n\n\n# TL;DR\n\nToday we will be making this in a PDF, starting from a tidy data frame of city population data:\n\n![Image of the pdf that we will be making](image_of_tables_in_pdf.png)\n\n# Introduction\n\nAs part of my job, there is a report I create every year.\n\nLast year, I wrote the report *without* using R. My workflow went like this:\n\n-   Import the CSV file into SPSS\n-   Manually clean the data and create the tables\n-   Paste the tables into Excel for formatting\n-   Paste the tables into Word for more formatting\n-   Send it to another team to professionally graphic-design the report\n-   Send the PDF to be published on the website\n\nHere is what last year's report looked like: <http://ccrnr.ca/assets/2018-nclex-rn-2017-canadian-and-international-results-ccrnr-en.pdf>\n\nI mean, it's pretty good! But it's not very reproducible...\n\nSince then, at my work, we've been converting all of our processes to be more reproducibly written in R! This is much more efficient, and more fun!\n\nSo this year, while writing the report using R, my workflow went like this:\n\n-   Import the CSV file into R\n-   Run my `.R` script to clean the data\n-   Run my `.Rmd` script to create the PDF\n-   Commit any changes, because the report is now version-controlled thanks to Jenny Bryan's [Happy Git and GitHub for the useR](https://happygitwithr.com/)! üòç\n-   Send the PDF to be published on the website\n\nThis is much more reproducible and will make the creation of next year's report so much faster!\n\n‚ùó**Click here to see what this year's reproducible report looked like: <http://ccrnr.ca/assets/2018-ccrnr-nclex-canadian-and-international-results-report-en.pdf>**‚ùó\n\n# How did I create the tables in PDF?\n\nAfter posting on Twitter about this updated process, some people asked how I created the tables in PDF using R.\n\nWell, the first few set-up steps in order to create tables in PDF are as follows:\n\n-   First, I downloaded the [`tinytex`](https://yihui.name/tinytex/) package in R\n-   I also installed the `bookdown` package in R, in order to be able to cross-reference tables (then the YAML output document type is `bookdown::pdf_document2`)\n-   I also installed the `knitr` and `kableExtra` packages, in order to be able to create the tables themselves using the `kable()` function\n\n# üçÅ A Canadian example! üçÅ\n\nNow I'll go through an example that uses all of the techniques I used while I was writing the report!\n\nThe Wikipedia page [List of the 100 largest population centres in Canada](https://en.wikipedia.org/wiki/List_of_the_100_largest_population_centres_in_Canada) has a table containing the largest 100 population centres (\"cities\") in Canada, along with their populations in 2011 and 2016.\n\nMy goal is to make a table that shows:\n\n-   the number of cities in each province that are in the top 100\n-   the population of each province in 2011 and 2016 (including the populations of the top 100 cities only)\n-   a \"Total\" row for Canada that shows the total number of cities (this number should equal 100)\n-   the population of Canada in 2011 and 2016 (including the populations of the top 100 cities only)\n\nI used the website [Convert Wiki Tables to CSV](https://wikitable2csv.ggor.de/) to turn the table on the Wikipedia page into a CSV file. Click [here](https://github.com/sharleenw/sharleenw.github.io/blob/main/posts/2019-09-01-tables-in-pdf/wiki_data.csv) to see the full raw file on my Github page.\n\n## Data import\n\nHere is the R code where I import the CSV file I created (`\"wiki_data.csv\"`). Underneath the code, I've displayed what the raw data file looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(readr)\n\nwiki_data_raw <- read_csv(here::here(\"posts\",\n                                     \"2019-09-01-tables-in-pdf\",\n                                     \"wiki_data.csv\")) %>%\n  clean_names()\n\nwiki_data_raw %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 7\n   rank population_centre    province      population_in_2016 population_in_2011\n  <dbl> <chr>                <chr>                      <dbl>              <dbl>\n1     1 \"Toronto\"            Ontario                  5429524            5144412\n2     2 \"Montreal\"           Quebec                   3519595            3387653\n3     3 \"Vancouver\"          British Colu‚Ä¶            2264823            2124443\n4     4 \"Calgary\"            Alberta                  1237656            1094379\n5     5 \"Edmonton\"           Alberta                  1062643             935361\n6     6 \"Ottawa\\x96Gatineau\" Ontario/Queb‚Ä¶             989657             945592\n# ‚Ñπ 2 more variables: percent_change <chr>, class <chr>\n```\n:::\n:::\n\n\n## Data cleaning\n\nI am only interested in the province of each city and what its population was in 2011 and 2016, so my first step in cleaning will be to select only those three columns. I will then use `group_by` and `summarize` to get the number of cities and populations on a per-province basis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwiki_data_by_province <- wiki_data_raw %>%\n  select(province,\n         population_2016 = population_in_2016,\n         population_2011 = population_in_2011) %>%\n   # Since some provinces were actually two provinces put together\n   # (e.g., \"Alberta/Saskatchewan\"), I used regex code from this website\n   # (https://www.perlmonks.org/?node_id=908348) to get everything before\n   # the first forward slash in the string\n  mutate(province = str_extract(province, \"^([^\\\\/]+)\")) %>%\n  group_by(province) %>%\n  summarize(number_of_cities_in_top_100 = n(),\n            pop_of_largest_cities_2011 = sum(population_2011),\n            pop_of_largest_cities_2016 = sum(population_2016))\n\nwiki_data_by_province\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 √ó 4\n   province number_of_cities_in_‚Ä¶¬π pop_of_largest_citie‚Ä¶¬≤ pop_of_largest_citie‚Ä¶¬≥\n   <chr>                     <int>                  <dbl>                  <dbl>\n 1 Alberta                      13                2538547                2891712\n 2 British‚Ä¶                     14                3254203                3471292\n 3 Manitoba                      2                 715649                 760249\n 4 New Bru‚Ä¶                      4                 244910                 250811\n 5 Newfoun‚Ä¶                      1                 172312                 178427\n 6 Nova Sc‚Ä¶                      2                 335154                 346605\n 7 Ontario                      39               10140286               10659522\n 8 Prince ‚Ä¶                      1                  41613                  44739\n 9 Quebec                       20                5140554                5337846\n10 Saskatc‚Ä¶                      4                 479228                 527638\n# ‚Ñπ abbreviated names: ¬π‚Äãnumber_of_cities_in_top_100,\n#   ¬≤‚Äãpop_of_largest_cities_2011, ¬≥‚Äãpop_of_largest_cities_2016\n```\n:::\n:::\n\n\nSince I also want a \"Total\" row for all of Canada, I will take the above `wiki_data_by_province` tibble and I will `summarize` the three columns in a new tibble to get the total sums for the number of cities and their populations in 2011 and 2016. Since using `summarize` means I lose the `province` variable, I will recreate it using `mutate` to have a value of \"Canada\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwiki_data_total_row <- wiki_data_by_province %>%\n  summarize(number_of_cities_in_top_100 = sum(number_of_cities_in_top_100),\n            pop_of_largest_cities_2011 = sum(pop_of_largest_cities_2011),\n            pop_of_largest_cities_2016 = sum(pop_of_largest_cities_2016)) %>%\n  mutate(province = \"Canada\")\n\nwiki_data_total_row\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 √ó 4\n  number_of_cities_in_t‚Ä¶¬π pop_of_largest_citie‚Ä¶¬≤ pop_of_largest_citie‚Ä¶¬≥ province\n                    <int>                  <dbl>                  <dbl> <chr>   \n1                     100               23062456               24468841 Canada  \n# ‚Ñπ abbreviated names: ¬π‚Äãnumber_of_cities_in_top_100,\n#   ¬≤‚Äãpop_of_largest_cities_2011, ¬≥‚Äãpop_of_largest_cities_2016\n```\n:::\n:::\n\n\nNow I want to merge both the `wiki_data_by_province` tibble and the `wiki_data_total_row` tibble on top of one another (using `bind_rows`). This will be the table that I will save and then read into my `.Rmd` file in order to create the table in PDF.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwiki_data_final_table <- wiki_data_by_province %>%\n  bind_rows(wiki_data_total_row) %>%\n  # This mutate_at\n  # (created using code from https://suzan.rbind.io/2018/02/dplyr-tutorial-2/#mutate-at-to-change-specific-columns)\n  # converts all variables containing the word \"pop\" to have commas separating the thousands.\n  mutate_at(vars(contains(\"pop\")),\n            list(. %>%\n                   scales::comma()))\n\nwiki_data_final_table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 √ó 4\n   province number_of_cities_in_‚Ä¶¬π pop_of_largest_citie‚Ä¶¬≤ pop_of_largest_citie‚Ä¶¬≥\n   <chr>                     <int> <chr>                  <chr>                 \n 1 Alberta                      13 2,538,547              2,891,712             \n 2 British‚Ä¶                     14 3,254,203              3,471,292             \n 3 Manitoba                      2 715,649                760,249               \n 4 New Bru‚Ä¶                      4 244,910                250,811               \n 5 Newfoun‚Ä¶                      1 172,312                178,427               \n 6 Nova Sc‚Ä¶                      2 335,154                346,605               \n 7 Ontario                      39 10,140,286             10,659,522            \n 8 Prince ‚Ä¶                      1 41,613                 44,739                \n 9 Quebec                       20 5,140,554              5,337,846             \n10 Saskatc‚Ä¶                      4 479,228                527,638               \n11 Canada                      100 23,062,456             24,468,841            \n# ‚Ñπ abbreviated names: ¬π‚Äãnumber_of_cities_in_top_100,\n#   ¬≤‚Äãpop_of_largest_cities_2011, ¬≥‚Äãpop_of_largest_cities_2016\n```\n:::\n:::\n\n\nNow I will save the `wiki_data_final_table` tibble as an `.rds` file so that I can read it into my `.Rmd` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwiki_data_final_table %>%\n  saveRDS(here::here(\"posts\",\n                     \"2019-09-01-tables-in-pdf\",\n                     \"cleaned_wiki_data_for_table.rds\"))\n```\n:::\n\n\n## Creating the tables in PDF\n\nBelow is the `.Rmd` file that reads in the `wiki_data_final_table` tibble and uses the `kable` and `kableExtra` packages in order to get the table to look the way I want it to.\n\nAlso, notice that in the YAML, my output format is `bookdown::pdf_document2`. This allows me to cross-reference my tables with the text of my document.\n\nSo, what's the real secret to creating tables in PDF from RMarkdown?\n\nThe secret is...\n\nThe document [Create Awesome LaTeX Table with knitr::kable and kableExtra](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf), written by Hao Zhu! It's got everything you need in order to make fantastic tables in PDF using RMarkdown.\n\n‚ùó**To see the final PDF of the below `.Rmd` file, click [here](https://github.com/sharleenw/sharleenw.github.io/blob/main/posts/2019-09-01-tables-in-pdf/largest_canadian_cities.pdf)‚ùó\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: 'The top 100 cities in Canada'\noutput: \n  bookdown::pdf_document2:\n    toc: no\n    number_sections: FALSE\n    keep_tex: TRUE\nalways_allow_html: yes\ngeometry: \"left=1.5cm,right=7cm,top=2cm,bottom=2cm\"\n\n---\n\n{r setup, include=FALSE}\n\nknitr::opts_chunk$set(echo = FALSE,\n                      warning = FALSE,\n                      message = FALSE,\n                      out.width= \"8.5in\")\n\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\n\n# Colours for the table\nblue_table_colour <- \"#9BD4F5\"\n\norange_table_colour <- \"#FF9000\"\n\nlight_striping_table_colour <- \"#DDDDDD\"\n\n\n{r import-cleaned-data}\n\nwiki_data_final_table <- readRDS(here::here(\"posts\",\n                                            \"2019-09-01-tables-in-pdf\",\n                                            \"cleaned_wiki_data_for_table.rds\"))\n\n\nTable @ref(tab:table-population-by-province) shows the populations of each province and of Canada in total for the years 2011 and 2016 (this data includes only the top 100 largest cities in Canada).\n\n{r table-population-by-province}\n\nwiki_data_final_table %>%\n  knitr::kable(\n    \"latex\",\n    booktabs = TRUE,\n    linesep = \"\",\n    caption = \"Number of cities and population of each province (including only the largest 100 cities in Canada)\",\n    col.names = c(\"Province\", \"Number of largest 100 cities in this province\", rep(c(\"2011\", \"2016\"), 1)),\n    align = c(\"l\", rep(\"r\", 3))) %>%\n  kable_styling(latex_options = \"HOLD_position\") %>%  # This line holds the table where you want it, so LaTeX won't move it around\n  add_header_above(\n    c(\" \" = 1,  # There has to be a space here, like this \" \", and not like this \"\"\n      \" \" = 1,\n      \"Population\" = 2),\n    bold = TRUE,\n    line = FALSE,\n    background = blue_table_colour\n  ) %>%\n  column_spec(1,\n              width = \"6cm\") %>%\n  column_spec(2:4,\n              width = \"3cm\") %>%\n  footnote(general = \"There are other cities in Canada not included in this table; the excluded cities are those smaller than the 100 largest cities in Canada.\",\n           threeparttable = TRUE,\n           general_title = \"Footnote:\") %>%\n  row_spec(\n    row = 0,\n    background = blue_table_colour,\n    bold = TRUE,\n    align = \"c\"\n  ) %>%\n  row_spec(\n    row = c(2,4,6,8,10),\n    background = light_striping_table_colour\n  ) %>%\n  row_spec(\n    row = 11,\n    background = orange_table_colour,\n    bold = TRUE\n  ) %>%\n  row_spec(\n    row = 10,\n    hline_after = TRUE)  # This hline unfortunately gets hidden by the orange colouring of the final row, so this line of code doesn't really do anything :(\n```\n:::\n\n\n<hr>\n\n# Session info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       Pacific/Honolulu\n date     2023-09-21\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n bit           4.0.5      2022-11-15 [1] CRAN (R 4.3.0)\n bit64         4.0.5      2020-08-30 [1] CRAN (R 4.3.0)\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.3.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n devtools    * 2.4.5      2022-10-11 [1] CRAN (R 4.3.1)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.2      2023-04-20 [1] CRAN (R 4.3.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emo         * 0.0.0.9000 2023-07-22 [1] Github (hadley/emo@3f03b11)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.3.0)\n fansi         1.0.4      2023-01-22 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.2      2023-04-25 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n here          1.0.1      2020-12-13 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httpuv        1.6.11     2023-05-11 [1] CRAN (R 4.3.1)\n httr          1.4.5      2023-02-24 [1] CRAN (R 4.3.0)\n janitor     * 2.2.0      2023-02-02 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.3.0)\n kableExtra  * 1.3.4      2021-02-20 [1] CRAN (R 4.3.1)\n knitr       * 1.42       2023-01-25 [1] CRAN (R 4.3.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate     1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n processx      3.8.1      2023-04-18 [1] CRAN (R 4.3.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.3.0)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr         1.0.1      2023-01-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n remotes       2.4.2      2021-11-30 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21       2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.1)\n rvest         1.0.3      2022-08-19 [1] CRAN (R 4.3.0)\n scales        1.2.1      2022-08-20 [1] CRAN (R 4.3.1)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n shiny         1.7.4      2022-12-15 [1] CRAN (R 4.3.0)\n snakecase     0.11.0     2019-05-25 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n svglite       2.1.1      2023-01-10 [1] CRAN (R 4.3.1)\n systemfonts   1.0.4      2022-02-11 [1] CRAN (R 4.3.0)\n tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.3.0)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis     * 2.2.2      2023-07-06 [1] CRAN (R 4.3.1)\n utf8          1.2.3      2023-01-31 [1] CRAN (R 4.3.0)\n vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.3.0)\n viridisLite   0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n vroom         1.6.3      2023-04-28 [1] CRAN (R 4.3.0)\n webshot       0.5.5      2023-06-26 [1] CRAN (R 4.3.1)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.39       2023-04-20 [1] CRAN (R 4.3.0)\n xml2          1.3.4      2023-04-27 [1] CRAN (R 4.3.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/sharl/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}