{
  "hash": "b2d41830512257a05847a3788a7c0d19",
  "result": {
    "markdown": "---\ntitle: 'Hamilton Christmas Bird Count: Part 3'\nauthor: Sharleen Weatherley\ndate: '2019-03-24'\ndescription: Creating a Shiny app for the Hamilton Christmas Bird Count data.\nimage: \"image.jpg\"\nimage-alt: \"Trumpeter Swans, Canada Geese and ducks on a pond in winter (Source: Public Domain Files)\"\ncategories: [birding, ggplot2, shiny]\n---\n\n::: {.cell}\n\n:::\n\n\n::: {.well .alert .alert-info role=\"alert\"}\nThis is a series of five posts for this data:\n\n-   [Part 1](../2019-01-07-hamilton-cbc-part-1/): data downloading and cleaning\n\n-   [Part 2a](../2019-02-23-hamilton-cbc-part-2a/): more cleaning\n\n-   [Part 2b](../2019-02-24-hamilton-cbc-part-2b/): visualizing\n\n-   [Part 3](../2019-03-24-hamilton-cbc-part-3/): a Shiny app\n\n-   [Part 4](../2019-05-26-hamilton-cbc-part-4/): a `gganimate` plot\n:::\n\n# Introduction\n\nThis post is to demonstrate a Shiny app I made so that people could look through the data themselves!\n\nI was able to make this whole app very easily thanks to the wonderful tutorial found [here](https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/)!\n\n# Data visualizing using a Shiny app\n\nHere is the link to my Shiny app: <https://sharleenw.shinyapps.io/hamilton_cbc_shiny/>\n\nAnd here is the code I used to make the app:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(scales)\n\nmin_max <- function(vector){\n  min_max <- c(min(vector), max(vector))\n  return(min_max)\n}\n\nhamilton_cbc <- read_rds(\"hamilton_cbc_output_part_2.rds\")\n\nspecies_list <- hamilton_cbc %>%\n  distinct(species) %>%\n  rename(Species = species) %>%\n  arrange(Species)\n\nyears_list <- hamilton_cbc %>%\n  distinct(year) %>%\n  rename(Year = year) %>%\n  arrange(-Year)\n\nyear_min_max <- min_max(years_list)\n\n\nui <- navbarPage(\"Hamilton Christmas Bird Count app\",\n                \n                 tabPanel(\n                   \n                   # App title ----\n                   titlePanel(tags$h4(\"Birds counted over multiple years\")),\n                   \n                   # Sidebar layout with input and output definitions ----\n                   sidebarLayout(\n                     \n                     # Sidebar panel for inputs ----\n                     sidebarPanel(\n                       \n                       # Input: which species ----\n                       selectizeInput(\"species_picked\",\n                                      multiple = TRUE,\n                                      selected = c(\"American Crow\", \"Black-capped Chickadee\", \"American Goldfinch\", \"Canada Goose\", \"American Robin\", \"Northern Cardinal\"),\n                                      label = \"Choose which species you would like to compare (up to six):\",\n                                      choices = species_list,\n                                      options = list(maxItems = 6)),\n                       \n                       \n                       # Input: Slider for the number of years ----\n                       sliderInput(\"years_picked\",\n                                   label = \"Number of years you would like to view:\",\n                                   sep = \"\",\n                                   min = year_min_max[1],\n                                   max = year_min_max[2],\n                                   value = c(1955, year_min_max[2])),\n                       \n                       helpText(tags$ol(\n                         tags$li(\"This data does not include birds counted only during count week\"),\n                         \n                         tags$li(\"This data does not include hybrids or birds that were only identified to the \\\"sp.\\\" level\"),\n                         \n                         tags$li(\"In 1955, the boundaries of the Hamilton Christmas Bird Count changed. I recommend only looking at data from 1955 onwards. However, the previous years' data have been included for completeness.\")\n                       )\n                       )\n                       \n                     ),\n                     \n                     # Main panel for displaying outputs ----\n                     mainPanel(\n                       \n                       # Output: Line graph ----\n                       plotOutput(outputId = \"time_series_plot\", height = \"800px\")\n                       \n                     )\n                   )\n                   ),\n                 \n                 \n                 tabPanel(\n                   \n                   titlePanel(tags$h4(\"Birds counted in a particular year\")),\n                   \n                   # Sidebar layout with input and output definitions ----\n                   sidebarLayout(\n                     \n                     # Sidebar panel for inputs ----\n                     sidebarPanel(\n                       \n                       # Input: which year ----\n                       selectInput(\"individual_year_picked\",\n                                   label = \"What year would you like to look at the Hamilton Christmas Bird Count data for:\",\n                                   choices = years_list)\n                       \n                     ),\n                     \n                     # Main panel for displaying outputs ----\n                     mainPanel(\n                       \n                       # Output: Data table ---- \n                       # can also do dataTableOutput\n                       tableOutput(outputId = \"count_table\")\n                       \n                     )\n                   )\n                   \n                   \n                   \n                 )\n)\n\n# Define server logic required to draw a plot and table ----\nserver <- function(input, output) {\n  \n  # First navbar output ----\n  data_input <- reactive({\n    \n    hamilton_cbc %>% \n      filter(year >= req(input$years_picked[1]),\n             year <= req(input$years_picked[2]),\n             species %in% req(input$species_picked))\n    \n  })\n  \n  output$time_series_plot <- renderPlot({\n    \n    \n    plotting_function <- function(input_for_plot){\n      \n      input_for_plot %>%\n        ggplot(aes(x = year, y = how_many_counted, color = species)) +\n        geom_line(size = 1) +\n        xlab(\"Year\") +\n        ylab(\"Number counted\") +\n        theme_minimal() +\n        theme(text = element_text(size = 18),\n              legend.position = \"none\",\n              plot.margin = margin(2, 20, 2, 2)) +\n        facet_wrap(vars(species),\n                   scales = \"free\",\n                   dir = \"v\") +\n        scale_y_continuous(labels = comma)\n      \n    }\n    \n    plotting_function(data_input())\n\n  })\n  \n  \n  # Second navbar output ----\n  \n  output$count_table <- renderTable({\n    \n    hamilton_cbc %>%\n      filter(year == input$individual_year_picked) %>%\n      count(species, how_many_counted) %>%\n      select(-n) %>%\n      arrange(-how_many_counted) %>%\n      filter(how_many_counted > 0) %>%\n      mutate(how_many_counted = how_many_counted %>%\n               scales::number(big.mark = \",\", accuracy = 1)) %>%\n      rename(Species = species, `How many were counted` = how_many_counted)\n    \n  },\n  \n  align = \"lr\")\n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nAnd thank you to the Christmas Bird Count! The Christmas Bird Count Data was provided by [National Audubon Society](www.christmasbirdcount.org) and through the generous efforts of [Bird Studies Canada](www.bsc-eoc.org) and countless volunteers across the western hemisphere.\n\n<hr>\n\n# Session info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Canada.utf8\n ctype    English_Canada.utf8\n tz       America/Vancouver\n date     2023-07-26\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n cachem        1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.3.0)\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n devtools    * 2.4.5      2022-10-11 [1] CRAN (R 4.3.1)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.2      2023-04-20 [1] CRAN (R 4.3.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emo         * 0.0.0.9000 2023-07-22 [1] Github (hadley/emo@3f03b11)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.3.0)\n fansi         1.0.4      2023-01-22 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fs            1.6.2      2023-04-25 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2     * 3.4.2      2023-04-03 [1] CRAN (R 4.3.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gtable        0.3.3      2023-03-21 [1] CRAN (R 4.3.0)\n here        * 1.0.1      2020-12-13 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.5      2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httpuv        1.6.10     2023-05-08 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.3.0)\n later         1.3.1      2023-05-02 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate     1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild      1.4.0      2022-11-27 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n processx      3.8.1      2023-04-18 [1] CRAN (R 4.3.0)\n profvis       0.3.8      2023-05-02 [1] CRAN (R 4.3.0)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.3.0)\n ps            1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr         1.0.1      2023-01-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n remotes       2.4.2      2021-11-30 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21       2023-03-26 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.3.0)\n scales      * 1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n shiny       * 1.7.4      2022-12-15 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr       1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.3.0)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.3.0)\n usethis     * 2.2.2      2023-07-06 [1] CRAN (R 4.3.1)\n utf8          1.2.3      2023-01-31 [1] CRAN (R 4.3.0)\n vctrs         0.6.2      2023-04-19 [1] CRAN (R 4.3.0)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.3.0)\n xfun          0.39       2023-04-20 [1] CRAN (R 4.3.0)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/sharl/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}