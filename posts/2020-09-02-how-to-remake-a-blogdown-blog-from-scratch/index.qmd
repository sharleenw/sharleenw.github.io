---
title: 'How to Remake a Blogdown Blog from Scratch'
author: Sharleen Weatherley
date: '2020-09-02'
description: What I learned rebuilding my blogdown blog.
categories: [blogdown, tutorial]
image: "image.jpg"
image-alt: "Yellow sparkly lights (Source: Public Domain Files)"
---

```{r setup, echo = FALSE, warning = FALSE, message = FALSE}
# Load frequently used packages and chunk settings

knitr::opts_chunk$set(
  comment = "",
  warning = FALSE,
  echo = TRUE,
  message = FALSE
)

library(emo) # for emojis
library(devtools) # for session_info()
library(here)

# `r emo::ji("smile")`  # Function call for emojis
```

::: {.well .alert .alert-danger .text-center role="alert"}
  **Update (2023):** My blog has broken a couple times since writing this post about Blogdown, Hugo, and Netlify, and so I've redone my blog again, this time in [Quarto](https://quarto.org/docs/websites/website-blog.html) and using Github Pages! I highly recommend using [Quarto and Github Pages](https://quarto.org/docs/publishing/github-pages.html) now. However, I have left the below post in case it helps anyone.
:::

# Background

In early 2019, I created a `blogdown` blog with the help of Alison Hill's great article [Up & Running with blogdown](https://alison.rbind.io/post/2017-06-12-up-and-running-with-blogdown/).

Recently, when I went to make a new blog post, I realized the blog was going to break since I'd updated some packages.

I decided I could either try to fix the blog, or make a new one (with a new theme!) and copy over my old blog posts. I chose the second option.

I learned a lot by doing this, so I've jotted down some things, in the hopes it might help myself or someone else!

So, in no particular order, here are some things I've learned! (Please let me know if anything is incorrect, I am by no means a `blogdown` expert.)

# Read the freakin' manual

-   Hugo Tranquilpeak has a great [user documentation section](https://github.com/kakawait/hugo-tranquilpeak-theme/blob/master/docs/user.md).

-   `blogdown` itself has a [book](https://bookdown.org/yihui/blogdown/) that has everything you could ever need to know about `blogdown`.

-   Alison Hill has a fantastic series of posts on her blog called "A Spoonful of Hugo" (with at least these four articles):

    -   [Page Bundles](https://alison.rbind.io/post/2019-02-21-hugo-page-bundles/)
    -   [The netlify.toml File](https://alison.rbind.io/post/2019-02-19-hugo-netlify-toml/)
    -   [Archetypes](https://alison.rbind.io/post/2019-02-19-hugo-archetypes/)
    -   [Troubleshooting Your Build](https://alison.rbind.io/post/2019-03-04-hugo-troubleshooting)

-   Including search terms like "blogdown rmd" or "hugo tranquilpeak" with my question gets different types of answers, some that will be more geared towards R and some that will be more geared towards hugo. I have found both types of searches to be helpful.

# How can I get emojis to work`r emo::ji("question")`

There are two options:

1.  Solution found [here](https://github.com/rstudio/blogdown/issues/171): Download Hadley Wickham's [`emo`](https://github.com/hadley/emo) package and type `` `r '\u0060r emo::ji("smile")\u0060'` `` into the text of the `.Rmd` file.

2.  Another solution is to set `enableEmoji = true` in the `config.toml`.

# Use `devtools::session_info()` at the bottom of every post

When transferring over my posts, two of them no longer worked due to external package updates!

So, following the great example set by David Neuzerling's [blog](https://mdneuzerling.com/) (and others), I will be adding `devtools::session_info()` to the bottom of my posts. I mean, it won't fix the fact that my code no longer works, but it adds an extra layer of proof that it did, in fact, work, at that particular time, given that particular set of tools!

# Use `renv`

I will be using `renv` with this blog, so that external package updates will no longer break my blog! (Hopefully.)

# Making a template

I've added an archetype to my blog, following Alison Hill's post on [Archetypes](https://alison.rbind.io/post/2019-02-19-hugo-archetypes/) (which references [this](http://lcolladotor.github.io/2018/03/08/blogdown-archetype-template/#.XwaeV-dE1hE) blog post by Leo Collado-Torres).

An "archetype" is another word for template.

I created an `archetype` folder in my top-level directory, and added my template (called `template.md`) to that folder. This `template` archetype now pops up as an option when I use the RStudio Addin "New Post".

To see the code that I used for my `/archetype/template.md` (modified from Leo Collado-Torres' archetype), click [here](https://raw.githubusercontent.com/sharleenw/blog2/main/archetypes/template.md).

# What to touch and what not to touch

-   The actual blog content goes in the `/content` folder, with posts going in the `/content/posts/` folder and any other type of content going in its own section (like `/content/about/` for the About section.)
-   Use page bundles to keep the content of the `/content` folder organized, and follow Yihui's advice to change the format of the permalinks in the `config.toml` to `"/:year/:month/:day/:slug/"` ([Page Bundles](https://alison.rbind.io/post/2019-02-21-hugo-page-bundles/)).
-   The `/public` folder can be deleted before rebuilding your website. In fact, why not regularly restart R, delete the `/public` folder and then `blogdown:::serve_site()` to make everything start fresh! ([Troubleshooting Your Build](https://alison.rbind.io/post/2019-03-04-hugo-troubleshooting)).
-   The `/archetype` folder needs to be top-level (I had to create this folder myself)
-   The `_output.yml` file also needs to be top-level.
-   If you have images or CSS you want to include, create the appropriate folders in the `/static` folder (`/static/img` or `/static/css`), as these will be copied into the `/public` folder once the site is built (`blogdown` [book](https://bookdown.org/yihui/blogdown/static-files.html)).
-   Don't touch the `/theme` folder! You should be able to do everything you need to do in the other folders.

# Adding an "About" page

The "About" page is not really a post, it's more of a standalone document. With the Tranquilpeak theme, there is an archetype called a "page" that you can use when creating it. The folder structure I used to create my "About" page was `/content/about/index.md`.

# There is a difference between `.Rmd` and `.Rmarkdown` (who knew?)

Tranquilpeak theme has a cute default syntax highlighting, but I couldn't figure out how to get it to work reliably. Until I realized the following (`blogdown` [book](https://bookdown.org/yihui/blogdown/output-format.html)):

-   Files saved as `.Rmarkdown` get converted to `.markdown` first, before `.html`.
-   However, files saved as `.Rmd` go straight to `.html`.

The fancy syntax highlighting only works in `.markdown` files (which only happens if I save the files as `.Rmarkdown` and not `.Rmd`). Some of the other CSS only works for `.markdown` files too. (See my section below on adding CSS.)

The `blogdown` book prefers `.Rmd` (as it allows for citations, which I have), so that's what I'm using. I figured out a comparable syntax highlighting in the next section.

# Syntax highlighting

Thanks to the `blogdown` [book](https://bookdown.org/yihui/blogdown/output-format.html), I found out I could create a `_output.yml` file in the root directory, and include a `.Rmd`-specific syntax highlighting template for all my files. My `_output.yml` file looks like:

```{yaml output, code = readLines("_output.yml"), message = FALSE, warning = FALSE, eval = FALSE}

```

Garrick Aden-Buie's blog has a nice [gallery](https://www.garrickadenbuie.com/blog/pandoc-syntax-highlighting-examples/) comparing the different syntax-highlighting options.

This `_output.yml` file can also be used to add defaults to each post. For example, I added a line to include a Table of Contents. However, this cannot be overwritten in each individual post, so it's an all-or-nothing thing.

# Relative links

On my original blog, I included all absolute links. Yikes! So now, thanks to Alison Hill's [Page Bundles](https://alison.rbind.io/post/2019-02-21-hugo-page-bundles/) post (that references the `blogdown` [book](https://bookdown.org/yihui/blogdown/configuration.html)), I now know how to make relative links. Basically, if I want to include relative posts, I look at what the structure of the `/public` folder is, and use that as my relative link. For example, if I wanted to refer to this post, I would use `/2020/07/08/how-to-remake-a-blogdown-blog-from-scratch/` as the link.

# My settings for the "New Post" Addin

-   Add a title. Author and Date should be filled in automatically
-   Subdirectory is "post"
-   Don't include categories
-   Add some relevant tags
-   Use the `template.md` archetype
-   Keep the default slug
-   Delete the "en-us" under Language
-   Format is `.Rmd`, not `.Rmarkdown`

# Adding a bit of CSS

::: {.well .alert .alert-info .text-center role="alert"}
  This is a notice
:::

::: {.well .alert .alert-danger .text-center role="alert"}
  Watch out!
:::

::: {.well .alert .alert-warning .text-center role="alert"}
  Warning!
:::

::: {.well .alert .alert-success .text-center role="alert"}
  Way to go!
:::

I wanted to be able to add the above alert bars to my posts so, using a combination of these two sources: [Bootstrap alerts](https://getbootstrap.com/docs/4.0/components/alerts/) and [Custom CSS with Rmd](https://aurora-mareviv.github.io/talesofr/2017/08/r-blogdown-setup-in-github/), I created a custom CSS file in `/static/css/mystyle.css` with the following code:

```{css mystyle, message = FALSE, warning = FALSE, eval = FALSE}
/* @import url('https://maxcdn.bootstrapcdn.com/bootswatch/3.3.7/cosmo/bootstrap.min.css'); may conflict with default theme*/
@import url('https://fonts.googleapis.com/icon?family=Material+Icons'); /*google icons*/
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'); /*font awesome icons*/

.alert {
padding: 15px;
margin-bottom: 20px;
border: 1px solid transparent;
border-radius: 4px;
}
.alert-success {
color: #3c763d;
background-color: #dff0d8;
border-color: #d6e9c6;
}
.alert-danger,
.alert-error {
  color: #b94a48;
  background-color: #f2dede;
  border-color: #eed3d7;
}
.alert-info {
  color: #3a87ad;
  background-color: #d9edf7;
  border-color: #bce8f1;
}
.alert-warning {
  background-color: #fffcbb;
  border-color: #ffed83;
}

```

And in my actual posts, I need to write the following `html`:

```{html}
<div class="well alert alert-info text-center" role="alert">
  <span class="fa fa-info-circle"></span>&nbsp;&nbsp;This is a notice
</div>

<div class="well alert alert-danger text-center" role="alert">
  <span class="fa fa-minus-circle"></span>&nbsp;&nbsp;Watch out!
</div>

<div class="well alert alert-warning text-center" role="alert">
  <span class="fa fa-exclamation-triangle"></span>&nbsp;&nbsp;Warning!
</div>

<div class="well alert alert-success text-center" role="alert">
  <span class="fa fa-check-circle"></span>&nbsp;&nbsp;Way to go!
</div>
```

# Thoughts for next time I want to update my blog

If I want to change my theme again, I think I could simply swap out the current theme in the `/theme` folder, update the `config.toml` and `/archetype/template.md` files, and be done? I may also have to update all of the `.yaml`s of each article.

I think I will just use Tom Mock's [blog post](https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/) and use `distill` if I ever want to update my blog again!

<hr/>

# Session info

```{r reproducibility, echo = FALSE}
# Reproducibility info

options(width = 80)
session_info()

```
